{
  "openapi": "3.0.3",
  "info": {
    "version": "0.55.1",
    "title": "SparrowHub API",
    "contact": {
      "email": "dev@rivalsoftware.com.au"
    },
    "description": "<br>\n<img src=\"https://cdn.sparrowhub.com.au/assets/headers/sparrowhub-api-header.png\" alt=\"SparrowHub API by Rival Software\" style=\"max-width: 400px;margin-left: -1.25rem;\" />\n\nThe SparrowHub API, developed by Rival Software, is a comprehensive solution designed to streamline the operations of e-commerce pharmacies. It provides a robust platform for managing various aspects of the e-commerce process, including order fulfillment, refunds, notifications, prescription processing, and more.\n\nThe API is organized into several collections, each focusing on a specific area of functionality. The 'Authentication' collection handles user registration and login, while the 'Users' and 'Locations' collections manage user profiles and location data respectively.\n\nThe 'Orders' collection is central to the API, providing endpoints for creating, retrieving, and updating orders. It also includes functionality for managing order notes and pickups. The 'Refunds' collection provides endpoints for processing refunds and managing refund notes.\n\nThe 'Couriers' and 'Deliveries' collections handle all aspects of delivery, from courier management to delivery batches and parcels.\n\nThe 'Scripts' collection is specifically designed for the SparrowScripts frontend application, and proxies for the ScriptServe API.\n\nThe SparrowHub API uses OpenAPI specification v3.0.3 and is available in three environments: a local docker container for development, a staging environment for testing & QA, and the production environment. This ensures a smooth transition from development to production, and allows for thorough testing at each stage.\n",
    "license": {
      "name": "Rival Software Pty Ltd",
      "url": "https://rivalsoftware.com.au"
    }
  },
  "servers": [
    {
      "url": "https://partner.sparrowhub.com.au/api/v1",
      "description": "Production API"
    },
    {
      "url": "https://s.sparrowhub.com.au/api/v1",
      "description": "Staging API"
    }
  ],
  "tags": [
    {
      "name": "Public",
      "description": "The API collection of endpoints exposed for \"public\" access."
    },
    {
      "name": "Functional",
      "description": "A collection of \"functional\" API endpoints that include improved validation and opinionated application logic."
    },
    {
      "name": "Filtering",
      "description": "A collection of \"filtering\" API endpoints that include pagination and filtering."
    },
    {
      "name": "SparrowHub",
      "description": "The API collection for the SparrowHub frontend application."
    },
    {
      "name": "SparrowCart",
      "description": "The SparrowHub API Carts collection."
    },
    {
      "name": "SparrowScripts",
      "description": "The API collection for the SparrowScripts frontend application."
    },
    {
      "name": "QueueDashboard",
      "description": "The API collection for the Queue Dashboard frontend application."
    },
    {
      "name": "ScriptServe",
      "description": "The API collection for proxied ScriptServe requests."
    },
    {
      "name": "RivalShop",
      "description": "The API collection for the RivalShop Magento application."
    },
    {
      "name": "ShopServe",
      "description": "The API collection for the ShopServe service."
    },
    {
      "name": "Authentication",
      "description": "The SparrowHub API Authentication collection."
    },
    {
      "name": "Partners",
      "description": "The SparrowHub API Partners collection."
    },
    {
      "name": "Users",
      "description": "The SparrowHub API Users collection."
    },
    {
      "name": "Locations",
      "description": "The SparrowHub API Locations collection."
    },
    {
      "name": "Messages",
      "description": "The SparrowHub API Messages collection."
    },
    {
      "name": "Notifications",
      "description": "The SparrowHub API Notifications collection."
    },
    {
      "name": "Integrations",
      "description": "The SparrowHub API Integration collection."
    },
    {
      "name": "Carts",
      "description": "The SparrowHub API Carts collection."
    },
    {
      "name": "Orders",
      "description": "The SparrowHub API Orders collection."
    },
    {
      "name": "Order Payment",
      "description": "The SparrowHub API Order Payment collection."
    },
    {
      "name": "Order Notes",
      "description": "The SparrowHub API Order Notes collection."
    },
    {
      "name": "Order Pickup",
      "description": "The SparrowHub API Order Pickup collection."
    },
    {
      "name": "Refunds",
      "description": "The SparrowHub API Refunds collection."
    },
    {
      "name": "Couriers",
      "description": "The SparrowHub API Couriers collection."
    },
    {
      "name": "Courier Locations",
      "description": "The SparrowHub API Courier Locations collection."
    },
    {
      "name": "Deliveries",
      "description": "The SparrowHub API Deliveries collection."
    },
    {
      "name": "Delivery Batches",
      "description": "The SparrowHub API Delivery Batches collection."
    },
    {
      "name": "Delivery Parcels",
      "description": "The SparrowHub API Delivery Parcels collection."
    },
    {
      "name": "Delivery Methods",
      "description": "The SparrowHub API Delivery Methods collection."
    },
    {
      "name": "Queue",
      "description": "The SparrowHub API Queue collection."
    },
    {
      "name": "Scripts",
      "description": "The SparrowHub API Scripts collection."
    },
    {
      "name": "System",
      "description": "Resources used for internal/system use."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication",
          "Functional"
        ],
        "operationId": "registerUser",
        "summary": "Register User",
        "description": "Create a new User entity and return the User's data.",
        "requestBody": {
          "description": "User interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthenticatedUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A filtered JSON dictionary of the newly created User entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Public",
          "Functional",
          "Authentication",
          "QueueDashboard"
        ],
        "operationId": "loginUser",
        "summary": "Login User",
        "description": "Login the User entity using the supplied credentials.",
        "requestBody": {
          "description": "Login interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A secure HttpOnly JWT token is returned in the response body and saved to the client's HttpOnly cookies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuthentication": []
          }
        ]
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Authentication",
          "Functional",
          "QueueDashboard"
        ],
        "operationId": "logoutUser",
        "summary": "Logout User",
        "description": "Logout the current User entity.",
        "responses": {
          "200": {
            "description": "An expired HttpOnly JWT token is returned in the response body and saved to the client's cookies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/auth/current": {
      "get": {
        "tags": [
          "Authentication",
          "Functional",
          "QueueDashboard"
        ],
        "operationId": "currentUser",
        "summary": "Get Current User",
        "description": "Get the current logged-in User entity and their data.",
        "responses": {
          "200": {
            "description": "A filtered JSON dictionary of the current User entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/auth/policies": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Auth"
        ],
        "operationId": "getPoliciesBySubject",
        "summary": "Get Policies by Subject",
        "description": "Get the authorization Policies by subject.",
        "requestBody": {
          "description": "Get Policies by Subject payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPoliciesBySubjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Policies for the given subject",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Auth"
        ],
        "operationId": "updatePolicies",
        "summary": "Update Policies",
        "description": "Update the authorization Policies for Partners, Users, Locations, User Roles, or Features.",
        "requestBody": {
          "description": "Update Policies payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePoliciesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the updated Policies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/auth/integrations": {
      "get": {
        "tags": [
          "Authentication",
          "Functional"
        ],
        "operationId": "currentIntegrations",
        "summary": "Get Current User Integrations",
        "description": "Get the current logged-in User's Integration entities.",
        "responses": {
          "200": {
            "description": "A filtered JSON dictionary of the current User's Integration entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredIntegrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/partners": {
      "post": {
        "tags": [
          "Authentication",
          "SparrowHub",
          "Functional",
          "Partners"
        ],
        "operationId": "createPartner",
        "summary": "Create Partner",
        "description": "Create a new Partner, and the minimum required entities.",
        "requestBody": {
          "description": "Create Partner interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePartnerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Partner, and related entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Partner"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Partners"
        ],
        "operationId": "getCurrentPartner",
        "summary": "Get Current Partner",
        "description": "Get the Partner for the currently logged-in user.",
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Partner, and related entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/GetCurrentPartnerResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/public/partners/{id}": {
      "post": {
        "tags": [
          "Public",
          "SparrowHub",
          "SparrowCart",
          "SparrowScripts",
          "Functional",
          "Partners"
        ],
        "operationId": "getRedactedPartner",
        "summary": "Get Redacted Partner",
        "description": "Get a redacted Partner entity by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the Partner that has been requested.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The public request payload for the Get Redacted Partner operation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRedactedPartnerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the redacted Partner entity, and associated properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/GetRedactedPartnerResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUsers",
        "summary": "Get Users",
        "description": "Get Users and their data.",
        "responses": {
          "200": {
            "description": "An array of User JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUser",
        "summary": "Get User",
        "description": "Get a single User entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of User that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the User entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUser",
        "summary": "Update User",
        "description": "Update a User entity and return the User's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of User that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "User interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created User entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUser",
        "summary": "Delete User",
        "description": "Delete a single User entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of User that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the User's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/locations": {
      "post": {
        "tags": [
          "Locations"
        ],
        "operationId": "createLocation",
        "summary": "Create Location",
        "description": "Create a new Location entity and return the Location's data.",
        "requestBody": {
          "description": "Location interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the newly created Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Location"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Locations"
        ],
        "operationId": "getLocations",
        "summary": "Get Locations",
        "description": "Get Locations and their data.",
        "responses": {
          "200": {
            "description": "An array of Location JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locations"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "operationId": "getLocation",
        "summary": "Get Location",
        "description": "Get a single Location entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Location that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Locations"
        ],
        "operationId": "updateLocation",
        "summary": "Update Location",
        "description": "Update a Location entity and return the Location's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Location that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Location interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "operationId": "deleteLocation",
        "summary": "Delete Location",
        "description": "Delete a single Location entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Location that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Location's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/locations/partners/{id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Locations",
          "QueueDashboard"
        ],
        "operationId": "getLocationsByPartnerID",
        "summary": "Get Partner Locations",
        "description": "Get Locations using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Locations",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Location JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locations"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "operationId": "createMessage",
        "summary": "Create Message",
        "description": "Create a new Message entity and return the Message's data.",
        "requestBody": {
          "description": "Message interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Message entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Messages"
        ],
        "operationId": "getMessages",
        "summary": "Get Messages",
        "description": "Get Messages and their data.",
        "responses": {
          "200": {
            "description": "An array of Message JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Messages"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "operationId": "getMessage",
        "summary": "Get Message",
        "description": "Get a single Message entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Message that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Message entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Messages"
        ],
        "operationId": "updateMessage",
        "summary": "Update Message",
        "description": "Update a Message entity and return the Message's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Message that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Message interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Message entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "deprecated": true,
        "tags": [
          "Messages"
        ],
        "operationId": "deleteMessage",
        "summary": "Delete Message",
        "description": "Delete a single Message entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Message that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Message's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/messages/partners/{id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "operationId": "getMessagesByPartnerID",
        "summary": "Get Partner Messages",
        "description": "Get Messages using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Messages",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Message JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Messages"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/messages/get/outstanding": {
      "get": {
        "tags": [
          "Messages"
        ],
        "operationId": "getMessagesOutstanding",
        "summary": "Get Outstanding Messages",
        "description": "Get all outstanding Messages, where `requires_action` is set to **TRUE**.",
        "responses": {
          "200": {
            "description": "An array of Message JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Messages"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/messages/{id}/process/actioned": {
      "put": {
        "tags": [
          "Messages",
          "Functional"
        ],
        "operationId": "processMessageActioned",
        "summary": "Process Message as Actioned",
        "description": "Mark a Message as *actioned* by setting `requires_action` to **FALSE**, and `is_read` to **TRUE**.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Message that requires updating",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An updated JSON dictionary of the Message entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/messages/{id}/process/read": {
      "put": {
        "tags": [
          "Messages",
          "Functional"
        ],
        "operationId": "processMessageRead",
        "summary": "Process Message as Read",
        "description": "Mark a Message as *read* by setting `is_read` to **TRUE**.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Message that requires updating",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An updated JSON dictionary of the Message entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Message"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/notifications/send": {
      "post": {
        "deprecated": true,
        "tags": [
          "Notifications"
        ],
        "operationId": "sendNotification",
        "summary": "Send Notification",
        "description": "Send a Notification entity to the specified contact information.",
        "requestBody": {
          "description": "Send Notification payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Notification entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Notification"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/public/notifications/send": {
      "post": {
        "tags": [
          "Public",
          "SparrowHub",
          "SparrowScripts",
          "Functional",
          "Notifications",
          "Queue"
        ],
        "operationId": "publicProcessNewNotification",
        "summary": "Process New Notification",
        "requestBody": {
          "description": "Process New Notification payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessNotificationNewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Notification and Notification Item(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/integrations": {
      "post": {
        "tags": [
          "Integrations",
          "Functional"
        ],
        "operationId": "createIntegration",
        "summary": "Create Integration",
        "description": "Create a new Integration entity and return the Integration's data.",
        "requestBody": {
          "description": "Integration interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A filtered JSON dictionary of the newly created Integration entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredIntegrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Integrations",
          "Functional"
        ],
        "operationId": "getIntegrations",
        "summary": "Get Integrations",
        "description": "Get Integrations and their data.",
        "responses": {
          "200": {
            "description": "A filtered JSON dictionary of Integration entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredIntegrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/integrations/{id}": {
      "get": {
        "tags": [
          "Integrations",
          "Functional"
        ],
        "operationId": "getIntegration",
        "summary": "Get Integration",
        "description": "Get a single Integration entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Integration that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A filtered JSON dictionary of the current Integration entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredIntegrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Integrations",
          "Functional"
        ],
        "operationId": "updateIntegration",
        "summary": "Update Integration",
        "description": "Update a Integration entity and return the Integration's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Integration that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Integration interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntegrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Integration entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Integrations"
        ],
        "operationId": "deleteIntegration",
        "summary": "Delete Integration",
        "description": "Delete a single Integration entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Integration that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A filtered JSON dictionary of the Integration deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/integrations/{id}/process/import": {
      "get": {
        "tags": [
          "Integrations",
          "Functional"
        ],
        "operationId": "processIntegrationImport",
        "summary": "Import Integration Entities",
        "description": "Trigger the import of entities for this Integration type, where applicable. This functionality is currently only supported for the `magento2` integration type, which imports Order entities.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Integration that needs to utilised",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON object of the Integration import result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationsProcessImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/integrations/webhook/lochting/order_status_change": {
      "post": {
        "tags": [
          "Public",
          "Integrations",
          "Functional"
        ],
        "operationId": "integrationWebhookOrderStatusChange",
        "summary": "Webhook that handles Lochting order status updates",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Reservation ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/robots/dispense/{reservation_id}": {
      "post": {
        "tags": [
          "SparrowHub",
          "Integrations",
          "Functional"
        ],
        "operationId": "dispenseRobot",
        "summary": "Dispense a reserved order",
        "parameters": [
          {
            "name": "reservation_id",
            "in": "path",
            "description": "ID of the reservation to dispense",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/robots/qr-code/{id}.png": {
      "get": {
        "tags": [
          "Integrations",
          "Public",
          "Functional"
        ],
        "operationId": "getRobotQrCode",
        "summary": "Get lochting QR code",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/robots/overbox-code/{id}.png": {
      "get": {
        "tags": [
          "SparrowHub",
          "Integrations",
          "Functional"
        ],
        "operationId": "getRobotOverboxCode",
        "summary": "Get lochting overbox code",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/carts": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Carts"
        ],
        "operationId": "createCart",
        "summary": "Create Cart",
        "description": "Create a new Cart by supplying Cart Items, delivery configuration, etc.",
        "requestBody": {
          "description": "Create Cart payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Cart and Cart Item(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Cart"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/carts/{id}": {
      "get": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Carts"
        ],
        "operationId": "getCart",
        "summary": "Get Cart",
        "description": "Get a single Cart entity by Cart ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Cart that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Cart entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CartWithItems"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Carts"
        ],
        "operationId": "updateCart",
        "summary": "Update Cart",
        "description": "Updates a Cart using the supplied ID. The redirect will become inactive and the Cart can no longer be used for customer checkout.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Cart to be updated.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The request payload for the Cart Lookup operation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Cart entity, with associated items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CartWithItems"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/carts/filter": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Filtering",
          "Carts"
        ],
        "operationId": "getCarts",
        "summary": "Get Carts",
        "description": "Get a filtered collection of Carts.",
        "requestBody": {
          "description": "Cart interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the filtered Cart entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/PagedCarts"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/public/carts/{id}": {
      "post": {
        "tags": [
          "Public",
          "SparrowCart",
          "SparrowScripts",
          "Functional",
          "Carts"
        ],
        "operationId": "cartLookup",
        "summary": "Cart Lookup",
        "description": "Attempt to find an eligible Cart using the reference.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The reference for the Cart that has been requested.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The request payload for the Cart Lookup operation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartLookupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Cart entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CartWithItems"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/public/orders": {
      "post": {
        "tags": [
          "Public",
          "Functional",
          "SparrowHub",
          "SparrowScripts",
          "SparrowCart",
          "Orders",
          "Order Payment"
        ],
        "operationId": "createOrder",
        "summary": "Create Order",
        "description": "Creates a new Order using the supplied Order Item(s), including the Delivery & Payment configuration, where applicable.\n\n**Delivery requirements:**  \n\nOrders are permitted to be created without the `delivery` parameter when:  \n\n**A.** The request is for a Cart (ie. `from_cart_id`) where `requires_delivery` is set to *false*. The session can be authenticated or public.  \n\n**Payment requirements:**  \n\nIf an order is created without payment, it is assumed any prices or totals submitted have already been paid for prior to creation in\nSparrowHub. If payment is required, the `Carts` feature can be used.  \n\nOrders are permitted to be created without the `payment` parameter when:  \n\n**A.** The request is for a Cart (ie. `from_cart_id`) where `requires_payment` is set to *false*. The session can be authenticated or public.  \n**B.** The request is made by a logged-in user with the role of `Manager`, `Owner`, or `Admin`. The session must be authenticated.  \n\n**Logic:**  \n\n1. Process a transaction with the Partner's enabled payment provider `Integration`, if required\n1. Create the Order:\n    1. Create the Order record with the submitted data, in the Order State & Order Status of `New`\n    1. Create the Order Item record(s) with the submitted `items` data\n    1. Update the associated Cart asynchronously, if required\n    1. Send email notification(s) asynchronously:\n        1. Send a \"New Order\" email notification to the Customer\n        1. If the Location has notifications enabled, send a \"New Order\" email notification to the recipient set in the `locations.contact_email` field\n1. Create a `Transaction` record with the Order and the Provider's response data, if required\n1. Return the Order and Order Item(s) data\n",
        "requestBody": {
          "description": "Create new Order payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the Order and Order Item(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "operationId": "getOrder",
        "summary": "Get Order",
        "description": "Get a single Order entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Order entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "deprecated": true,
        "tags": [
          "Orders"
        ],
        "operationId": "updateOrder",
        "summary": "Update Order",
        "description": "Update a Order entity and return the Order's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Order interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Order entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "deprecated": true,
        "tags": [
          "Orders"
        ],
        "operationId": "deleteOrder",
        "summary": "Delete Order",
        "description": "Delete a single Order entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Order's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/filter": {
      "post": {
        "tags": [
          "ShopServe",
          "Functional",
          "Filtering",
          "Orders"
        ],
        "operationId": "getOrders",
        "summary": "Get Orders",
        "description": "Get some orders.\n\nIf you pass in `filter_chain` - it will progressively limit the orders, otherwise, it'll return all orders.\nIf you pass in `pagination` - it will return one page of orders using the given parameters, otherwise it'll return all the pages.\n\n* Send `page_size` for the size of the page, eg. 10.\n* `page_number which number of page you want to send\n\n## Returns (inside of data)\n\n* `page_number` - The page that you're looking at\n* `page_size` - How many orders are in each page\n* `last_page_number` - The last page, if you want to see the oldest data\n* `orders` - The contents of the page\n",
        "requestBody": {
          "description": "Order interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized page of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrderPage"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/partners/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "operationId": "getOrdersByPartnerID",
        "summary": "Get Partner Orders",
        "description": "Get Orders using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Orders",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Order JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/locations/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "operationId": "getOrdersByLocationCode",
        "summary": "Get Location Orders",
        "description": "Get Orders using the supplied Location Code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of Location used filter the fetched Orders",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Order JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/{id}/process/transfer": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Orders",
          "Locations"
        ],
        "operationId": "processOrderLocationTransfer",
        "summary": "Order Location Transfer",
        "description": "Transfer a New Order from one Location to another.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order that needs to be transferred",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "description": "Order Location Transfer payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderLocationTransferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Order and Order Item(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/{id}/process/duplication": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Orders"
        ],
        "operationId": "processOrderDuplication",
        "summary": "Order Duplication",
        "description": "Duplicate an existing Order, returning a new Order with a new Order Number which includes an alphabet suffix. The existing Order must be in a valid state, which includes:\n\n| Attribute       | Accepted Values                                  |\n|-----------------|--------------------------------------------------|\n| Order Status    | `Cancelled`, `InTransit`, `Complete`, `Refunded` |\n| Order State     | `Processing`, `Complete`                         |\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order that needs to be transferred",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Order and Order Item(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/{id}/process/pickup/new": {
      "post": {
        "tags": [
          "Order Pickup",
          "Functional"
        ],
        "operationId": "processPickupNewByOrderId",
        "summary": "Process Pickup Order Creation",
        "description": "Processes the creation of Pickup for a Click & Collect order, when the order is marked as ready by the user. The Order and Order Note entities are updated using the supplied Order ID, and a \"Ready for Collection\" email is sent to the customer.\n\n**This endpoint has the following goals:**\n\n1. Update the Magento integration's Order\n    1. Send the *Ready for Collection* email\n    1. Set the Magento order status to `Complete`\n1. Update the Scription Order\n    1. Set the Order State to `Processing`\n    1. Set the Order Status to `Awaiting Pickup`\n1. Create the Order Note \"**Order ready for pickup by Customer**\"\n1. Return the updated Order data\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Order used to create a pickup.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "New Order Pickup payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessOrderPickupNewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated(awaiting pickup) Order entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/{id}/process/pickup/complete": {
      "post": {
        "tags": [
          "Order Pickup",
          "Functional"
        ],
        "operationId": "processPickupCompleteByOrderId",
        "summary": "Process Pickup Order Completion",
        "description": "Processes the completion of Pickup for a Click & Collect order that already exists in the `Awaiting Pickup` status, when the order is collected by the customer. The Order, Order Items, and Order Note entities are updated using the supplied Order ID.\n\n**This endpoint has the following goals:**\n\n1. Update the Scription Order\n    1. Set the *Completion Date* to **NOW**\n    1. Set the Order State to `Complete`\n    1. Set the Order Status to `Complete`\n    1. Set the Order Items *Shipped QTY* to the Orders remaining Item qty\n1. Create the Order Note \"**Order collected by customer**\"\n1. Create the custom Order Note if one was submitted\n1. Return the updated Order data\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Order used to update for pickup completion.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Order Pickup Completion payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessOrderPickupCompleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated(collected) Order entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/orders/{id}/process/update_status": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional"
        ],
        "operationId": "processOrderUpdateStatus",
        "summary": "Process Order Update Status",
        "description": "Update an Order's `status_code`, set the corresponding `state_code`, and return the Order's updated data.\n\n**Note:** This endpoint currently has limited support to ensure proper validation. The following status update operations are currently supported:\n- OnHold -> New\n- Archived -> New\n- New -> Archived\n- Fraud -> Archived\n- AwaitingPayment -> Archived\n- OnHold -> Archived\n- New -> OnHold\n- Archived -> OnHold\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Process Order Update Status interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessOrderUpdateStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated Order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/public/orders/payment/authentication": {
      "post": {
        "tags": [
          "Public",
          "Functional",
          "SparrowHub",
          "SparrowScripts",
          "SparrowCart",
          "Orders",
          "Order Payment"
        ],
        "operationId": "ordersPaymentAuthentication",
        "summary": "Order Payment Authentication",
        "description": "Creates a Payment Authentication request for a yet-to-be-created order, to be used in the subsequent \"Process New Order\" request.  \n\nThe supplied card is Authenticated with the payment provider(Tyro) and the result is checked to determine whether the 3D-Secure \"frictionless flow\" or \"challenge flow\" are required on the front-end.  \n\n**This endpoint has the following goals:**\n1. Create a temporary Transaction and Order reference number\n1. Run the \"Initiate Authentication\" operation with Tyro\n1. Run the \"Authentication Payment\" operation with Tyro\n1. Process the result to determine if the card & transaction are valid\n1. Process the result to determine what 3D-Secure mechanism must be used on the front-end\n1. Return the result and 3D-Secure properties, if the payment was successfully Authenticated\n",
        "requestBody": {
          "description": "Order Payment Authentication payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPaymentAuthenticationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary containing the Order Payment Authentication result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrderPaymentAuthenticationResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/order-notes": {
      "post": {
        "tags": [
          "Order Notes"
        ],
        "operationId": "createOrderNote",
        "summary": "Create Order Note",
        "description": "Create a new Order Note entity and return the Order Note's data.",
        "requestBody": {
          "description": "Order Note interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderNoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Order Note entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Order Notes"
        ],
        "operationId": "getOrderNotes",
        "summary": "Get Order Notes",
        "description": "Get Order Notes and their data.",
        "responses": {
          "200": {
            "description": "An array of Order Note JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNotes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/order-notes/{id}": {
      "get": {
        "tags": [
          "Order Notes"
        ],
        "operationId": "getOrderNote",
        "summary": "Get Order Note",
        "description": "Get a single Order Note entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order Note that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Order Note entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Order Notes"
        ],
        "operationId": "updateOrderNote",
        "summary": "Update Order Note",
        "description": "Update a Order Note entity and return the Order Note's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order Note that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Order Note interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderNoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Order Note entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Order Notes"
        ],
        "operationId": "deleteOrderNote",
        "summary": "Delete Order Note",
        "description": "Delete a single Order Note entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order Note that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Order Note's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/order-notes/orders/{id}": {
      "get": {
        "tags": [
          "Order Notes"
        ],
        "operationId": "getOrderNotesByPartnerID",
        "summary": "Get Partner Order Notes",
        "description": "Get Order Notes using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Order Notes",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Order Note JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNotes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/refunds/orders/{id}/process/refund": {
      "post": {
        "tags": [
          "Refunds",
          "Functional"
        ],
        "operationId": "processRefundByOrderId",
        "summary": "Process Order Refund",
        "description": "Creates and processes(payment refund) a refund for the supplied Order ID.\n\n**This endpoint has the following goals:**\n\n1. Create the *staged* Scription Refund\n1. Process the Magento integration's Refund\n    1. Create the Magento Refund entity (Credit Memo)\n    1. Process the Refund by Magento payment processor\n    1. Send the *Refund* email\n    1. Set the Magento Order status to `Complete`\n1. Update the Scription Refund\n    1. Set the *Refunded Date* to **NOW**\n    1. Set the Refund Status to `Complete`\n    1. Set the *Refund Adjustment* to the submitted value\n    1. Set the *Refund Delivery* to the submitted value\n    1. Set the Refund Items *Refunded QTY* to the submitted Refund Item qty\n1. Update the Scription Order\n    1. Set the *Completion Date* to **NOW**\n    1. Set the Order State to `Complete`\n    1. Set the Order Status to `Refunded`\n    1. Set the *Refund Adjustment* to the submitted value\n    1. Set the *Refund Delivery* to the submitted value\n    1. Set the Order Items *Refunded QTY* to the submitted Refund Item qty\n1. Create the Refund Note \"**Refund processed**\"\n1. Create the custom Refund Note if one was submitted\n1. Create the Order Note \"**Refund processed**\"\n1. Create the custom Order Note if one was submitted\n1. Return the updated Order data\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Order used filter the refunded order",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Process Refund payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated(refunded) Order entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/refunds": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "operationId": "getRefunds",
        "summary": "Get Refunds",
        "description": "Get Refunds and their data.",
        "responses": {
          "200": {
            "description": "An array of Refund JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refunds"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/refunds/{id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "operationId": "getRefund",
        "summary": "Get Refund",
        "description": "Get a single Refund entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Refund that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Refund entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Refunds"
        ],
        "operationId": "updateRefund",
        "summary": "Update Refund",
        "description": "Update a Refund entity and return the Refund's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Refund that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Refund interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Refund entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "deprecated": true,
        "tags": [
          "Refunds"
        ],
        "operationId": "deleteRefund",
        "summary": "Delete Refund",
        "description": "Delete a single Refund entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Refund that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Refund's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/refunds/partners/{id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "operationId": "getRefundsByPartnerID",
        "summary": "Get Partner Refunds",
        "description": "Get Refunds using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Partner used filter the fetched Refunds",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Refund JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refunds"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/refunds/orders/{id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "operationId": "getRefundsByOrderID",
        "summary": "Get Order Refunds",
        "description": "Get Refunds using the supplied Order ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Order used filter the fetched Refunds",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Refund JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refunds"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/refunds/locations/{code}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "operationId": "getRefundsByLocationCode",
        "summary": "Get Location Refunds",
        "description": "Get Refunds using the supplied Location Code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Location used filter the fetched Refunds",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Refund JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refunds"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/couriers": {
      "post": {
        "tags": [
          "Couriers"
        ],
        "operationId": "createCourier",
        "summary": "Create Courier",
        "description": "Create a new Courier entity and return the Courier's data.",
        "requestBody": {
          "description": "Courier interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Courier entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Courier"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Couriers"
        ],
        "operationId": "getCouriers",
        "summary": "Get Couriers",
        "description": "Get Couriers and their data.",
        "responses": {
          "200": {
            "description": "An array of Courier JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Couriers"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/couriers/{id}": {
      "get": {
        "tags": [
          "Couriers"
        ],
        "operationId": "getCourier",
        "summary": "Get Courier",
        "description": "Get a single Courier entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Courier that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Courier entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Courier"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Couriers"
        ],
        "operationId": "updateCourier",
        "summary": "Update Courier",
        "description": "Update a Courier entity and return the Courier's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Courier that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Courier interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Courier entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Courier"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Couriers"
        ],
        "operationId": "deleteCourier",
        "summary": "Delete Courier",
        "description": "Delete a single Courier entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Courier that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Courier's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/couriers/partners/{id}": {
      "get": {
        "tags": [
          "Couriers",
          "Functional"
        ],
        "operationId": "getCouriersByPartnerId",
        "summary": "Get Partner Couriers",
        "description": "Get Couriers using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Couriers",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Courier Location JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Couriers"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/courier-locations": {
      "post": {
        "tags": [
          "Courier Locations"
        ],
        "operationId": "createCourierLocation",
        "summary": "Create Courier Location",
        "description": "Create a new Courier Location entity and return the Courier Location's data.",
        "requestBody": {
          "description": "Courier Location interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourierLocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Courier Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CourierLocation"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Courier Locations"
        ],
        "operationId": "getCourierLocations",
        "summary": "Get Courier Locations",
        "description": "Get Courier Locations and their data.",
        "responses": {
          "200": {
            "description": "An array of Courier Location JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CourierLocations"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/courier-locations/{id}": {
      "get": {
        "tags": [
          "Courier Locations"
        ],
        "operationId": "getCourierLocation",
        "summary": "Get Courier Location",
        "description": "Get a single Courier Location entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Courier Location that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Courier Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CourierLocation"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Courier Locations"
        ],
        "operationId": "updateCourierLocation",
        "summary": "Update Courier Location",
        "description": "Update a Courier Location entity and return the Courier Location's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Courier Location that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Courier Location interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourierLocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Courier Location entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CourierLocation"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Courier Locations"
        ],
        "operationId": "deleteCourierLocation",
        "summary": "Delete Courier Location",
        "description": "Delete a single Courier Location entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Courier Location that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the CourierLocation's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/courier-locations/partners/{id}": {
      "get": {
        "tags": [
          "Courier Locations"
        ],
        "operationId": "getCourierLocationsByPartnerID",
        "summary": "Get Partner Courier Locations",
        "description": "Get Courier Locations using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Courier Locations",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Courier Location JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CourierLocations"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/locations/{code}/collections": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "getCollectionDeliveriesByLocation",
        "summary": "Get Collection Deliveries by Location",
        "description": "Get processing Deliveries that are pending carrier collection(not batched/manifested) using the supplied Location Code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Location used to retrieve Deliveries marked for collection",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deliveries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/locations/{code}/dropoffs": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "getDropoffDeliveriesByLocation",
        "summary": "Get Dropoff Deliveries by Location",
        "description": "Get processing Deliveries that are pending carrier dropoff(not batched/manifested) using the supplied Location Code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Location used to retrieve Deliveries marked for dropoff",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deliveries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/orders/{id}/process/new": {
      "post": {
        "tags": [
          "Deliveries",
          "Functional"
        ],
        "operationId": "processDeliveryByOrderId",
        "summary": "Process Order Delivery Creation",
        "description": "Creates and processes a delivery(with a Courier) using the supplied Order ID, Order Items, and delivery configuration.\n\n**This endpoint has the following goals:**\n\n1. Create the *staged* Delivery\n1. Create the Courier's Delivery and Delivery Item(s)\n1. Create the Courier Label(s), if necessary\n1. Get the Courier Label(s), if necessary\n1. Download the Label(s) and upload them to storage\n1. Update the Delivery\n    1. Set the Delivery *Courier Created At* to the Courier's response value\n    1. Set the Delivery *Courier Reference* to the Courier's response value\n    1. Set the Delivery *Courier Tracking Code* to the Courier's response value\n    1. Set the Delivery *Total Cost* to the Courier's response value\n    1. Set the Delivery *Total Shipping Cost* to the Courier's response value\n    1. Set the Delivery *Total Surcharge Cost* to the Courier's response value\n    1. Set the Delivery *Tax* to the Courier's response value\n    1. Set the Delivery *Labels* to the storage file path key\n1. Update the Delivery Item's\n    1. Set the Delivery Item's *Courier Created At* to the Courier's response value\n    1. Set the Delivery Item's *Courier Reference* to the Courier's response value\n    1. Set the Delivery Item's *Courier Tracking Code* to the Courier's response value\n    1. Set the Delivery Item's *Total Cost* to the Courier's response value\n    1. Set the Delivery Item's *Total Shipping Cost* to the Courier's response value\n    1. Set the Delivery Item's *Total Surcharge Cost* to the Courier's response value\n    1. Set the Delivery Item's *Tax* to the Courier's response value\n    1. Set the Delivery Item's *Label* to the Courier's response value\n1. Update the Order\n    1. Set the Order State to `Processing`\n    1. Set the Order Status depending on Courier Type:\n        | Courier Type       | Order Status          |\n        | ------------------ | --------------------- |\n        | **Australia Post** | `Awaiting Processing` |\n        | **DoorDash**       | `Awaiting Courier`    |\n        | **Custom Courier** | `Awaiting Courier`    |\n        | **Aramex**         | `Awaiting Courier`    |\n    1. Set the Delivery Model Code to the *Selected Delivery Model*\n1. Update the Order Item's\n    1. Set the Order Item's *Delivered QTY* to the submitted Delivery Item qty\n1. Create the Order Note \"**Order processed**\"\n1. Return the Delivery and Delivery Item(s) data\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Order used to create the new Delivery",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "New Delivery payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessDeliveryNewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Delivery and Delivery Item(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/{id}/process/complete": {
      "post": {
        "tags": [
          "Deliveries",
          "Functional"
        ],
        "operationId": "processDeliveryCompleteByDeliveryId",
        "summary": "Process Delivery Completion",
        "description": "Completes an *awaiting_courier* Delivery using the supplied Delivery ID, to be triggered when an Order of various Courier Types is delivered/collected.\n\n**This endpoint has the following goals:**\n\n1. Update the Delivery\n    1. Set the Delivery *Completed At* to **NOW**\n1. Update the Delivery Item's\n    1. Set the Delivery Item's *Completed At* to **NOW**\n1. Update the Order\n    1. Set the Order *Completed At* to **NOW**\n    1. Set the Order State to `Complete`\n    1. Set the Order Status to `Complete`\n1. Create the Order Note \"**Delivery cancelled**\"\n1. Return the updated Order data\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Delivery used for completion.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Complete Delivery payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessDeliveryCompleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated Order entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/{id}/process/cancel": {
      "post": {
        "tags": [
          "Deliveries",
          "Functional"
        ],
        "operationId": "processDeliveryCancellationByDeliveryId",
        "summary": "Process Delivery Cancellation",
        "description": "Cancels a *processing*(not batched/manifested) Delivery(with a Courier) using the supplied Delivery ID.\n\n**This endpoint has the following goals:**\n\n1. Cancel the Courier Delivery\n1. Update the Delivery\n    1. Set the Delivery *Courier Completed At* to **NOW**\n    1. Set the Delivery *Courier Reference* to **None**\n    1. Set the Delivery *Courier Tracking Code* to **None**\n    1. Set the Delivery *Courier Service Name* to **None**\n    1. Set the Delivery *Courier Note* to **None**\n    1. Set the Delivery *Total Cost* to **None**\n    1. Set the Delivery *Total Shipping Cost* to **None**\n    1. Set the Delivery *Total Surcharge Cost* to **None**\n    1. Set the Delivery *Tax* to **None**\n    1. Set the Delivery *Labels* to **None**\n1. Update the Delivery Item's\n    1. Set the Delivery Item's *Courier Completed At* to **NOW**\n    1. Set the Delivery Item's *Total Cost* to **None**\n    1. Set the Delivery Item's *Total Shipping Cost* to **None**\n    1. Set the Delivery Item's *Total Surcharge Cost* to **None**\n    1. Set the Delivery Item's *Tax* to **None**\n1. Update the Order\n    1. Set the Order State to `New`\n    1. Set the Order Status to `New`\n    1. Set the Delivery Model Code to **None**\n1. Update the Order Item's\n    1. Set the Order Item's *Delivered QTY* to the original qty - Delivery Item qty\n1. Create the Order Note \"**Delivery reopened**\"\n1. Return the updated Order data\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Delivery cancellation",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Cancel Delivery payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessDeliveryCancelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated Order entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries": {
      "post": {
        "deprecated": true,
        "tags": [
          "Deliveries"
        ],
        "operationId": "createDelivery",
        "summary": "Create Delivery",
        "description": "Create a new Delivery entity and return the Delivery's data.",
        "requestBody": {
          "description": "Delivery interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeliveryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "getDeliveries",
        "summary": "Get Deliveries",
        "description": "Get Deliveries and their data.",
        "responses": {
          "200": {
            "description": "An array of Delivery JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deliveries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/{id}": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "getDelivery",
        "summary": "Get Delivery",
        "description": "Get a single Delivery entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Delivery entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "updateDelivery",
        "summary": "Update Delivery",
        "description": "Update a Delivery entity and return the Delivery's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Delivery interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeliveryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "deprecated": true,
        "tags": [
          "Deliveries"
        ],
        "operationId": "deleteDelivery",
        "summary": "Delete Delivery",
        "description": "Delete a single Delivery entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Delivery's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/partners/{id}": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "getDeliveriesByPartnerID",
        "summary": "Get Partner Deliveries",
        "description": "Get Deliveries using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Deliveries",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deliveries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/locations/{code}": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "getDeliveriesByLocationCode",
        "summary": "Get Location Deliveries",
        "description": "Get Deliveries using the supplied Location Code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of Location used filter the fetched Deliveries",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deliveries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/delivery-batches/{id}": {
      "get": {
        "tags": [
          "Deliveries",
          "Functional"
        ],
        "operationId": "getDeliveriesByDeliveryBatchID",
        "summary": "Get Delivery Batch Deliveries",
        "description": "Get Deliveries using the supplied Delivery Batch ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Batch used filter the fetched Deliveries",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deliveries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/orders/{id}": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "operationId": "getDeliveriesByDeliveryOrderID",
        "summary": "Get Order Deliveries",
        "description": "Get Deliveries using the supplied Order ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Order used filter the fetched Deliveries",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deliveries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/deliveries/{id}/get/labels": {
      "get": {
        "tags": [
          "Deliveries",
          "Functional"
        ],
        "operationId": "getDeliveriesLabels",
        "summary": "Get Labels for Delivery",
        "description": "Get the Label(s) for a Delivery and its associated Delivery Item(s), generated by the Courier (if applicable).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A PDF document for the Courier's Label(s).",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-batches/locations/{code}/process/collections": {
      "post": {
        "tags": [
          "Delivery Batches",
          "Functional"
        ],
        "operationId": "processCollectionDeliveryBatchByLocation",
        "summary": "Process Collection Delivery Batch by Location",
        "description": "Creates and finalises a Delivery Batch for **collection** type deliveries(with a Courier) using the supplied Location Code, and Delivery ID's.\n\n**WARNING:** This finalises the Delivery Batch(Manifest) and charges the connected Courier account. This cannot be reversed/cancelled programmatically.\n\n**This endpoint has the following goals:**\n\n1. Create the *staged* Delivery Batch\n1. Create the Courier's Delivery Batch with submitted Deliveries (and Delivery Item's by extension)\n1. Get the Courier's Delivery Batch Document\n1. Update the Delivery Batch\n    1. Set the Delivery Batch *Courier Created At* to **NOW**\n    1. Set the Delivery Batch *Courier Reference* to the Courier's response value\n    1. Set the Delivery Batch *Total Cost* to the Courier's response value\n    1. Set the Delivery Batch *Tax* to the Courier's response value\n    1. Update the Delivery Batch *Order Qty* to the Order count\n    1. Update the Delivery Batch *Order Item Qty* to the Order Item count\n    1. Update the Delivery Batch *Delivery Qty* to the Delivery Count\n    1. Update the Delivery Batch *Delivery Item Qty* to the Delivery Item Count\n    1. Set the Delivery Batch *Weight* to the Courier's response value\n    1. Set the Delivery Batch *Document* to the Courier's response value\n1. Update the Delivery\n    1. Set the Delivery *Total Cost* to the Courier's response value\n    1. Set the Delivery *Total Shipping Cost* to the Courier's response value\n    1. Set the Delivery *Total Surcharge Cost* to the Courier's response value\n    1. Set the Delivery *Tax* to the Courier's response value\n1. Update the Delivery Item's\n    1. Set the Delivery Item's *Total Cost* to the Courier's response value\n    1. Set the Delivery Item's *Total Shipping Cost* to the Courier's response value\n    1. Set the Delivery Item's *Total Surcharge Cost* to the Courier's response value\n    1. Set the Delivery Item's *Tax* to the Courier's response value\n1. Update the Order\n    1. Set the Order State to `Processing`\n    1. Set the Order Status to `Awaiting Collection`\n1. Create the Order Note \"**Order Summary Report created**\"\n1. Return the Delivery Batch data without *Document*\n",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The code of the Location for whom a collection Delivery Batch will be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New Delivery Batch payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessCollectionDeliveryBatchByLocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Delivery Batch entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-batches/locations/{code}/process/dropoffs": {
      "post": {
        "tags": [
          "Delivery Batches",
          "Functional"
        ],
        "operationId": "processDropoffDeliveryBatchByLocation",
        "summary": "Process Dropoff Delivery Batch by Location",
        "description": "Creates and finalises a Delivery Batch for **dropoff** type deliveries(with a Courier) using the supplied Location Code, and Delivery ID's.\n\n**WARNING:** This finalises the Delivery Batch(Manifest) and charges the connected Courier account. This cannot be reversed/cancelled programmatically.\n\n**This endpoint has the following goals:**\n\n1. Create the *staged* Delivery Batch\n1. Create the Courier's Delivery Batch with submitted Deliveries (and Delivery Item's by extension)\n1. Get the Courier's Delivery Batch Document\n1. Update the Delivery Batch\n    1. Set the Delivery Batch *Courier Created At* to **NOW**\n    1. Set the Delivery Batch *Courier Reference* to the Courier's response value\n    1. Set the Delivery Batch *Total Cost* to the Courier's response value\n    1. Set the Delivery Batch *Tax* to the Courier's response value\n    1. Update the Delivery Batch *Order Qty* to the Order count\n    1. Update the Delivery Batch *Order Item Qty* to the Order Item count\n    1. Update the Delivery Batch *Delivery Qty* to the Delivery Count\n    1. Update the Delivery Batch *Delivery Item Qty* to the Delivery Item Count\n    1. Set the Delivery Batch *Weight* to the Courier's response value\n    1. Set the Delivery Batch *Document* to the Courier's response value\n1. Update the Delivery\n    1. Set the Delivery *Total Cost* to the Courier's response value\n    1. Set the Delivery *Total Shipping Cost* to the Courier's response value\n    1. Set the Delivery *Total Surcharge Cost* to the Courier's response value\n    1. Set the Delivery *Tax* to the Courier's response value\n1. Update the Delivery Item's\n    1. Set the Delivery Item's *Total Cost* to the Courier's response value\n    1. Set the Delivery Item's *Total Shipping Cost* to the Courier's response value\n    1. Set the Delivery Item's *Total Surcharge Cost* to the Courier's response value\n    1. Set the Delivery Item's *Tax* to the Courier's response value\n1. Update the Order\n    1. Set the Order State to `Processing`\n    1. Set the Order Status to `Awaiting Dropoff`\n1. Create the Order Note \"**Order Summary Report created**\"\n1. Return the Delivery Batch data without *Document*\n",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The code of the Location for whom a dropoff Delivery Batch will be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New Delivery Batch payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessDropoffDeliveryBatchByLocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Delivery Batch entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-batches": {
      "post": {
        "deprecated": true,
        "tags": [
          "Delivery Batches"
        ],
        "operationId": "createDeliveryBatch",
        "summary": "Create Delivery Batch",
        "description": "Create a new Delivery Batch entity and return the Delivery Batch's data.",
        "requestBody": {
          "description": "Delivery Batch interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeliveryBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery Batch entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Delivery Batches"
        ],
        "operationId": "getDeliveryBatches",
        "summary": "Get Delivery Batches",
        "description": "Get Delivery Batches and their data.",
        "responses": {
          "200": {
            "description": "An array of Delivery Batch JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-batches/{id}": {
      "get": {
        "tags": [
          "Delivery Batches"
        ],
        "operationId": "getDeliveryBatch",
        "summary": "Get Delivery Batch",
        "description": "Get a single Delivery Batch entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Batch that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Delivery Batch entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Delivery Batches"
        ],
        "operationId": "updateDeliveryBatch",
        "summary": "Update Delivery Batch",
        "description": "Update a Delivery Batch entity and return the Delivery Batch's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Batch that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Delivery Batch interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeliveryBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery Batch entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "deprecated": true,
        "tags": [
          "Delivery Batches"
        ],
        "operationId": "deleteDeliveryBatch",
        "summary": "Delete Delivery Batch",
        "description": "Delete a single Delivery Batch entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Batch that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the DeliveryBatch's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-batches/partners/{id}": {
      "get": {
        "tags": [
          "Delivery Batches"
        ],
        "operationId": "getDeliveryBatchesByPartnerID",
        "summary": "Get Partner Delivery Batches",
        "description": "Get Delivery Batches using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Delivery Batches",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery Batch JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-batches/locations/{code}": {
      "get": {
        "tags": [
          "Delivery Batches"
        ],
        "operationId": "getDeliveryBatchesByLocationCode",
        "summary": "Get Location Delivery Batches",
        "description": "Get Delivery Batches using the supplied Location Code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of Location used filter the fetched Delivery Batches",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Delivery Batch JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FilteredDeliveryBatchResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-batches/{id}/get/document": {
      "get": {
        "tags": [
          "Delivery Batches",
          "Functional"
        ],
        "operationId": "getDeliveryBatchDocument",
        "summary": "Get Delivery Batch Document",
        "description": "Get a single Delivery Batch document, generated by the Courier(if applicable).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Batch that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A PDF document for the Courier's Delivery Batch.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-parcels": {
      "post": {
        "tags": [
          "Delivery Parcels"
        ],
        "operationId": "createDeliveryParcel",
        "summary": "Create Delivery Parcel",
        "description": "Create a new Delivery Parcel entity and return the Delivery Parcel's data.",
        "requestBody": {
          "description": "Delivery Parcel interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeliveryParcelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery Parcel entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryParcel"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Delivery Parcels"
        ],
        "operationId": "getDeliveryParcels",
        "summary": "Get Delivery Parcels",
        "description": "Get Delivery Parcels and their data.",
        "responses": {
          "200": {
            "description": "An array of Delivery Parcel JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryParcels"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-parcels/{id}": {
      "get": {
        "tags": [
          "Delivery Parcels"
        ],
        "operationId": "getDeliveryParcel",
        "summary": "Get Delivery Parcel",
        "description": "Get a single Delivery Parcel entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Parcel that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Delivery Parcel entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryParcel"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Delivery Parcels"
        ],
        "operationId": "updateDeliveryParcel",
        "summary": "Update Delivery Parcel",
        "description": "Update a Delivery Parcel entity and return the Delivery Parcel's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Parcel that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Delivery Parcel interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeliveryParcelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery Parcel entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryParcel"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Delivery Parcels"
        ],
        "operationId": "deleteDeliveryParcel",
        "summary": "Delete Delivery Parcel",
        "description": "Delete a single Delivery Parcel entity and their data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Parcel that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the DeliveryParcel's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-parcels/partners/{id}": {
      "get": {
        "tags": [
          "Delivery Parcels"
        ],
        "operationId": "getDeliveryParcelsByPartnerId",
        "summary": "Get Partner Delivery Parcels",
        "description": "Get Delivery Parcels using the supplied Partner ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Partner used filter the fetched Delivery Parcels",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Courier Location JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryParcels"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-parcels/locations/{code}": {
      "get": {
        "tags": [
          "Delivery Parcels"
        ],
        "operationId": "getDeliveryParcelsByLocationCode",
        "summary": "Get Location Delivery Parcels",
        "description": "Get Delivery Parcels using the supplied Location Code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of Location used filter the fetched Delivery Parcels",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Courier Location JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryParcels"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-methods": {
      "post": {
        "tags": [
          "Delivery Methods"
        ],
        "operationId": "createDeliveryMethod",
        "summary": "Create Delivery Method",
        "description": "Create a new Delivery Method entity and return the Delivery Method's data.",
        "requestBody": {
          "description": "Delivery Method interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeliveryMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery Method entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryMethod"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Delivery Methods"
        ],
        "operationId": "getDeliveryMethods",
        "summary": "Get Delivery Methods",
        "description": "Get Delivery Methods and their data.",
        "responses": {
          "200": {
            "description": "An array of Delivery Method JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryMethods"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-methods/{id}": {
      "get": {
        "tags": [
          "Delivery Methods"
        ],
        "operationId": "getDeliveryMethod",
        "summary": "Get Delivery Method",
        "description": "Get a single Delivery Method entity and its data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Method that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Delivery Method entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryMethod"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Delivery Methods"
        ],
        "operationId": "updateDeliveryMethod",
        "summary": "Update Delivery Method",
        "description": "Update a Delivery Method entity and return the Delivery Method's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Method that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Delivery Method interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeliveryMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the newly created Delivery Method entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryMethod"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Delivery Methods"
        ],
        "operationId": "deleteDeliveryMethod",
        "summary": "Delete Delivery Method",
        "description": "Delete a single Delivery Method entity and its data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Delivery Method that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the DeliveryMethod's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/delivery-methods/process/get_quotes": {
      "post": {
        "tags": [
          "Functional",
          "RivalShop",
          "Delivery Methods"
        ],
        "operationId": "getDeliveryMethodQuotes",
        "summary": "Get Delivery Method Quotes",
        "description": "Get available Delivery Method Quotes for the given delivery details, and location.",
        "requestBody": {
          "description": "Get Delivery Methods interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicGetDeliveryMethodsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An array of Delivery Method JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryMethodsResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/public/delivery-methods": {
      "post": {
        "tags": [
          "Public",
          "Functional",
          "SparrowHub",
          "SparrowScripts",
          "SparrowCart",
          "Delivery Methods"
        ],
        "operationId": "publicGetDeliveryMethods",
        "summary": "Get Delivery Method Quotes",
        "description": "Get available Delivery Methods Quotes for the given delivery details, and location.",
        "requestBody": {
          "description": "Public Get Delivery Methods interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicGetDeliveryMethodsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "An array of Delivery Method JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DeliveryMethods"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/queue": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Queue"
        ],
        "operationId": "createQueueElement",
        "summary": "Create Queue Element",
        "description": "Creates a new Queue Element using the supplied details.\n\n**This endpoint has the following goals:**\n\n1. Create the Queue Element with the submitted data, in the following state:\n    1. Set the Order State to `New`\n    1. Set the Order Status to `New`\n1. TODO: Send an SMS/Email Notification to the Customer if possible\n1. Return the Order data\n",
        "requestBody": {
          "description": "Create Queue Element payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQueueElementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the new Queue Element",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/QueueElementWithItems"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "get": {
        "tags": [
          "Queue"
        ],
        "operationId": "getQueueElements",
        "summary": "Get Queue Elements",
        "description": "Get all Queue Elements and their data.",
        "responses": {
          "200": {
            "description": "An array of Queue Element JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueElementsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/queue/number": {
      "post": {
        "tags": [
          "SparrowHub",
          "Functional",
          "Queue"
        ],
        "operationId": "createQueueNumber",
        "summary": "Create Queue Number",
        "description": "Return a valid Queue Number for use with the Create Queue Element endpoint.\n\nThis is optional; a Queue Number will be generated automatically by the Process Queue Element New handler if one is not provided.\n",
        "requestBody": {
          "description": "Create Queue Number payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQueueNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary containing a valid Queue number",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/QueueNumber"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/queue/{id}": {
      "get": {
        "tags": [
          "Queue"
        ],
        "operationId": "getQueueElement",
        "summary": "Get Queue Element",
        "description": "Get a single Queue Element and its data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Queue Element that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON dictionary of the Queue Element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueElementSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "put": {
        "deprecated": true,
        "tags": [
          "SparrowHub",
          "Queue"
        ],
        "operationId": "updateQueueElement",
        "summary": "Update Queue Element",
        "description": "Update a Queue Element and return the Queue Element's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Queue Element that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Queue Element interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueueElementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated Queue Element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueElementSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      },
      "delete": {
        "deprecated": true,
        "tags": [
          "Queue"
        ],
        "operationId": "deleteQueueElement",
        "summary": "Delete Queue Element",
        "description": "Delete a single Queue Element and its data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Queue Element that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An integer result is returned for the Queue Element's deletion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/queue/{id}/process/update": {
      "put": {
        "tags": [
          "SparrowHub",
          "Queue",
          "Functional"
        ],
        "operationId": "processQueueElementUpdate",
        "summary": "Process Queue Element Update",
        "description": "Update a Queue Element's selected fields (listed below) and return the Queue Element's updated data.\n\n- is_on_hold\n- is_on_dashboard\n- requires_consultation\n- customer_first_name\n- customer_last_name\n- customer_phone\n- customer_email\n- queue_note\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Queue Element that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Process Queue Element Update interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessQueueElementUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated Queue Element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueElementSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/queue/{id}/process/complete_consultation": {
      "put": {
        "tags": [
          "SparrowHub",
          "Queue",
          "Functional"
        ],
        "operationId": "processQueueElementCompleteConsultation",
        "summary": "Process Queue Element Complete Consultation",
        "description": "Update a Queue Element's `consultation_completed_at` & `consultation_user_id` fields and return the Queue Element's updated data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Queue Element that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Update Queue Element Complete Consultation interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessQueueElementCompleteConsultationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON dictionary of the updated Queue Element",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueElementSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/queue/status": {
      "put": {
        "tags": [
          "SparrowHub",
          "Queue",
          "Functional"
        ],
        "operationId": "updateQueueStatus",
        "summary": "Update Queue Status",
        "description": "Update the `queue_status_code` and `queue_state_code` fields for a list of Queue Elements, trigger any additional required operations for the target status, and return the Queue Element's updated data.",
        "requestBody": {
          "description": "Update Queue Status interface payload.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueueStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized dictionary of the updated Queue Element(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UpdateQueueStatusResponse"
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/queue/locations/{id}": {
      "get": {
        "tags": [
          "SparrowHub",
          "Queue",
          "Functional"
        ],
        "operationId": "getQueueElementsByLocationID",
        "summary": "Get Location Queue Elements",
        "description": "Get Queue Elements using the supplied Location ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Location used filter the fetched Queue Elements",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Queue Element JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueElementsSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/queue/locations/{id}/dashboard": {
      "get": {
        "tags": [
          "Queue",
          "Functional",
          "QueueDashboard"
        ],
        "operationId": "getDashboardQueueDashboardNumbersByLocationId",
        "summary": "Get Location Dashboard Queue Element Numbers",
        "description": "Get Queue Element Numbers using the supplied Location ID that should be displayed on the Dashboard (`queue_status_code === awaiting_collection` and `is_on_dashboard === true`).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of Location used filter the fetched Queue Elements",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Queue Element JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDashboardNumbersSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    },
    "/public/scripts/partners": {
      "post": {
        "tags": [
          "Public",
          "SparrowScripts",
          "Functional",
          "Partners",
          "Scripts"
        ],
        "operationId": "getScriptsPartners",
        "summary": "Get Scripts Partners",
        "description": "Get a list of available SparrowScripts Partners.",
        "requestBody": {
          "description": "The public request payload for the Get Scripts Partners operation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetScriptsPartnersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized array of redacted Partners, with associated properties.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GetRedactedPartnerResponse"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/public/scripts/products": {
      "post": {
        "tags": [
          "Public",
          "Functional",
          "SparrowHub",
          "SparrowScripts",
          "ScriptServe",
          "Scripts",
          "Queue"
        ],
        "operationId": "getEscriptProducts",
        "summary": "Get eScript Products",
        "description": "Make a medication request with a supplied eScript token and return a full product payload, when possible.",
        "requestBody": {
          "description": "Interface payload containing parameters for the ScriptServe Product Request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A deserialized collection of products from a prescription token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "204": {
            "description": "No errors, but no results returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "404": {
            "description": "Prescription token passed was not found in the system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "410": {
            "description": "The prescription token has already been dispensed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse-2"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/public/system/health_check": {
      "get": {
        "tags": [
          "System"
        ],
        "operationId": "getHealthCheck",
        "summary": "API Health Check",
        "description": "Check the Scription API, Database health status.",
        "responses": {
          "200": {
            "description": "A JSON dictionary containing the health status and message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request error. Returned for invalid requests to Tyro and other integrations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error. Returned when the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found error. Returned when a network or API resource is not found, and not by application logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error. Returned when a resource already exists, or a conflict between request payload properties.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. Returned for validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error. Returned for internal server errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerTokenAuthentication": []
          },
          {
            "CookieAuthentication": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserRoles": {
        "type": "string",
        "description": "The role of the SparrowHub user. You cannot assign a role with greater access than your own.\n\n| Role            | Description                                                                                                                         |\n|-----------------|-------------------------------------------------------------------------------------------------------------------------------------|\n| admin           | A SparrowHub administrator and employee, with extended priviledges.                                                                 |\n| owner           | The user is an owner of the Partner's SparrowHub account, with full access to all features.                                         |\n| manager         | The user is a manager of the SparrowHub account, with increased priviledges compared to a standard user.                            |\n| user            | The user is a standard user of the SparrowHub account.                                                                              |\n",
        "enum": [
          "admin",
          "owner",
          "manager",
          "user"
        ]
      },
      "CreateAuthenticatedUserRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "partner_id": {
            "type": "integer"
          },
          "role_code": {
            "$ref": "#/components/schemas/UserRoles"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email",
          "password",
          "partner_id",
          "role_code"
        ]
      },
      "FilteredUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "last_seen": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "telephone": {
            "type": "string"
          },
          "is_email_verified": {
            "type": "boolean"
          },
          "is_account_disabled": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "role_code": {
            "$ref": "#/components/schemas/UserRoles"
          },
          "reference": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "first_name",
          "last_name",
          "email",
          "created_at",
          "last_seen",
          "is_email_verified",
          "is_account_disabled",
          "partner_id",
          "role"
        ]
      },
      "FilteredUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FilteredUser"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "LoginUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "token"
        ]
      },
      "LogoutUserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "token"
        ]
      },
      "PolicyType": {
        "type": "string",
        "description": "Used to determine the type (ie. Policy or Grouping Policy) of a [Casbin](https://casbin.org/) authorization policy.\nThese values are mapped to the model defined in the `authorization_model.conf` file, which is ingested during the application startup and sets the matching rules for the policies.\nA **Policy** is used to determine if a partner or user has access to a resource. (not yet implemented) A **Grouping Policy** is used to group user roles, partners & users into a role or permission.  \nThe grouping policy `g2` exists to allow for additional segmentation and extended functionality, like assigning subjects to API resources.  \n**Defined policy types:**  \n* `p` - Standard policy type. * `g` - Grouping policy type. * `g2` - Additional grouping policy type.",
        "minLength": 1,
        "maxLength": 128,
        "enum": [
          "p",
          "g",
          "g2"
        ]
      },
      "SubjectPrefix": {
        "type": "string",
        "enum": [
          "feature",
          "location",
          "partner",
          "role",
          "user"
        ]
      },
      "ObjectPrefix": {
        "type": "string",
        "enum": [
          "feature",
          "role"
        ]
      },
      "Action": {
        "type": "string",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE"
        ]
      },
      "UpdatePoliciesRequest": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "behaviour": {
              "type": "string",
              "enum": [
                "add",
                "delete"
              ]
            },
            "policy_type": {
              "$ref": "#/components/schemas/PolicyType"
            },
            "subject_prefix": {
              "$ref": "#/components/schemas/SubjectPrefix"
            },
            "subject": {
              "type": "string",
              "description": "The subject of the policy, which can be a Partner ID, User ID, Location ID, User Role, or Feature.",
              "minLength": 1,
              "maxLength": 128
            },
            "object_prefix": {
              "$ref": "#/components/schemas/ObjectPrefix"
            },
            "object": {
              "type": "string",
              "description": "The object of the policy, which can be a User Role or Feature.",
              "minLength": 1,
              "maxLength": 128
            },
            "action": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "required": [
            "behaviour",
            "policy_type",
            "subject_prefix",
            "subject",
            "object_prefix",
            "object"
          ]
        }
      },
      "GetPoliciesBySubjectRequest": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "policy_type": {
              "$ref": "#/components/schemas/PolicyType"
            },
            "subject_prefix": {
              "$ref": "#/components/schemas/SubjectPrefix"
            },
            "subject": {
              "type": "string",
              "description": "The subject of the policy, which can be a Partner ID, User ID, Location ID, User Role, or Feature.",
              "minLength": 1,
              "maxLength": 128
            }
          },
          "required": [
            "policy_type",
            "subject_type",
            "subject_value"
          ]
        }
      },
      "IntegrationTypes": {
        "type": "string",
        "enum": [
          "google_analytics",
          "lochting",
          "magento2",
          "script_serve",
          "stripe",
          "tyro"
        ]
      },
      "IntegrationModes": {
        "type": "string",
        "enum": [
          "live",
          "test"
        ]
      },
      "FilteredIntegration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sync_freq": {
            "type": "integer"
          },
          "sync_window": {
            "type": "integer"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "partner_id": {
            "type": "integer"
          },
          "type_code": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "mode_code": {
            "$ref": "#/components/schemas/IntegrationModes"
          },
          "last_synced_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "reference": {
            "type": "string"
          },
          "api_public_key": {
            "type": "string",
            "maxLength": 65535
          },
          "public_url": {
            "type": "string",
            "maxLength": 65535
          }
        },
        "required": [
          "id",
          "name",
          "sync_freq",
          "is_enabled",
          "created_at",
          "partner_id",
          "type_code",
          "mode_code"
        ]
      },
      "FilteredIntegrationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FilteredIntegration"
          }
        }
      },
      "Partner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "description": {
            "type": "string",
            "maxLength": 512
          },
          "is_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "minLength": 1,
            "maxLength": 65535
          },
          "brand_colour": {
            "type": "string",
            "description": "The hex colour code of the partner's brand",
            "maxLength": 6
          },
          "billing_address_id": {
            "type": "integer"
          },
          "website_url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048
          }
        },
        "required": [
          "id",
          "name",
          "is_enabled",
          "created_at",
          "reference"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "region_code": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "partner_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "created_at",
          "partner_id"
        ]
      },
      "CourierLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contact_name": {
            "type": "string"
          },
          "contact_email": {
            "type": "string"
          },
          "contact_phone": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "courier_id": {
            "type": "integer"
          },
          "courier_type_code": {
            "type": "string"
          },
          "address_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "hours": {
            "type": "string"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "code",
          "name",
          "is_enabled",
          "courier_type_code"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contact_name": {
            "type": "string",
            "description": "The Location's main contact name.",
            "maxLength": 255
          },
          "contact_email": {
            "type": "string",
            "description": "The Location's main contact email.",
            "maxLength": 255
          },
          "contact_phone": {
            "type": "string",
            "description": "The Location's main contact phone number."
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "is_pickup_location": {
            "type": "boolean"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "image_dropoff": {
            "type": "string"
          },
          "courier_location": {
            "$ref": "#/components/schemas/CourierLocation"
          },
          "is_default": {
            "type": "boolean",
            "description": "This is used to set the default `Location` **per Partner**."
          },
          "support_name": {
            "type": "string",
            "description": "The Location's support contact name."
          },
          "support_email": {
            "type": "string",
            "description": "The Location's support contact email."
          },
          "support_phone": {
            "type": "string",
            "description": "The Location's support contact phone number."
          },
          "enable_notifications": {
            "type": "boolean",
            "description": "Whether the Location has notifications enabled."
          },
          "google_place_id": {
            "type": "string",
            "description": "The Google Place ID for the Location, which can be identified [here](https://developers.google.com/maps/documentation/places/web-service/place-id).",
            "minLength": 1,
            "maxLength": 65535
          }
        },
        "required": [
          "id",
          "created_at",
          "code",
          "name",
          "contact_name",
          "contact_email",
          "contact_phone",
          "is_pickup_location",
          "is_enabled",
          "partner_id",
          "address",
          "is_default",
          "enable_notifications"
        ]
      },
      "CourierTypes": {
        "type": "string",
        "enum": [
          "auspost",
          "doordash",
          "custom-courier",
          "aramex"
        ]
      },
      "AvailableIntegrations": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type_code": {
              "$ref": "#/components/schemas/IntegrationTypes"
            },
            "public_url": {
              "type": "string",
              "description": "The public URL for an integration, if applicable. Currently only the Magento 2 integration type is supported.",
              "minLength": 1,
              "maxLength": 512
            },
            "api_public_key": {
              "type": "string",
              "minLength": 1,
              "maxLength": 65535
            }
          },
          "required": [
            "code"
          ]
        }
      },
      "PolicyFeature": {
        "type": "string",
        "enum": [
          "carts",
          "queue",
          "scripts",
          "send",
          "strongpro"
        ]
      },
      "PoliciesResponse": {
        "type": "object",
        "properties": {
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyFeature"
            }
          }
        },
        "required": [
          "features"
        ]
      },
      "GetCurrentPartnerResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Partner"
          }
        ],
        "properties": {
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "default_location": {
            "$ref": "#/components/schemas/Location"
          },
          "available_couriers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourierTypes"
            }
          },
          "available_integrations": {
            "$ref": "#/components/schemas/AvailableIntegrations"
          },
          "policies": {
            "$ref": "#/components/schemas/PoliciesResponse"
          }
        },
        "required": [
          "id",
          "name",
          "is_enabled",
          "created_at",
          "reference",
          "available_couriers",
          "available_integrations",
          "policies"
        ]
      },
      "AddressRegions": {
        "type": "string",
        "enum": [
          "NSW",
          "QLD",
          "VIC",
          "SA",
          "WA",
          "NT",
          "TAS",
          "ACT"
        ],
        "format": "[Australian Postal](https://en.wikipedia.org/wiki/States_and_territories_of_Australia)",
        "description": "The State/Region as a **string** up to 3 characters in length, using the Australian Postal format. Currently only Australia states and territories are supported.",
        "example": "NSW",
        "minLength": 2,
        "maxLength": 3
      },
      "AddressCountries": {
        "type": "string",
        "enum": [
          "AU"
        ],
        "format": "Standard [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) (2-digit only)",
        "description": "The Country Code, using 2-digit standard ISO 3166-2. Currently only Australia(AU) is supported.",
        "example": "AU",
        "minLength": 2,
        "maxLength": 2
      },
      "CreatePartnerRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The Partner's account name",
            "minLength": 1,
            "maxLength": 128
          },
          "description": {
            "type": "string",
            "description": "The Partner's account description",
            "minLength": 1,
            "maxLength": 512
          },
          "brand_colour": {
            "type": "string",
            "description": "The hex colour code of the partner's brand",
            "minLength": 6,
            "maxLength": 6
          },
          "website_url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048
          },
          "location": {
            "type": "object",
            "description": "The `location` property is used to create a Partner's initial `location` and `address` entities.  \n**Please note:** The `address` should be set accurately to ensure available and correct courier quotes.  ",
            "properties": {
              "name": {
                "type": "string",
                "description": "The Location's name",
                "minLength": 1,
                "maxLength": 255
              },
              "description": {
                "type": "string",
                "minLength": 1,
                "maxLength": 512
              },
              "contact_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "contact_email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "contact_phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": 61431471915,
                "minLength": 6,
                "maxLength": 14
              },
              "latitude": {
                "type": "string",
                "format": "bigdecimal",
                "x-rust-type": "bigdecimal::BigDecimal",
                "description": "The latitude of the Location, which is required to support the Carrier delivery quote calculations. This field accepts a string, containing a float with up to 6 decimal places. The database column is set to SQL Decimal type `DECIMAL (8,6)`.",
                "example": -33.883266
              },
              "longitude": {
                "type": "string",
                "format": "bigdecimal",
                "x-rust-type": "bigdecimal::BigDecimal",
                "description": "The longitude of the Location, which is required to support the Carrier delivery quote calculations. This field accepts a string, containing a float with up to 6 decimal places. The database column is set to SQL Decimal type `DECIMAL (8,6)`.",
                "example": 151.192127
              },
              "is_pickup_location": {
                "type": "boolean"
              },
              "image_dropoff": {
                "type": "string",
                "format": "binary",
                "x-rust-type": "Vec<u8>"
              },
              "support_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "support_email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "support_phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": 61431471915,
                "minLength": 6,
                "maxLength": 14
              },
              "enable_notifications": {
                "type": "boolean"
              },
              "google_place_id": {
                "type": "string",
                "description": "The Google Place ID for the Location, which can be identified [here](https://developers.google.com/maps/documentation/places/web-service/place-id).",
                "minLength": 1,
                "maxLength": 65535
              },
              "address": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The address's name/label",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                    "example": "Unit 2/4,123 Fake St",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": 2000,
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "name",
              "contact_name",
              "contact_email",
              "contact_phone",
              "address"
            ]
          },
          "user": {
            "type": "object",
            "description": "The `user` property is used to create a User which is the owner of the Partner account.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "password": {
                "type": "string",
                "writeOnly": true,
                "format": "password",
                "minLength": 8,
                "maxLength": 100
              },
              "telephone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": 61431471915,
                "minLength": 6,
                "maxLength": 14
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "password",
              "telephone"
            ]
          },
          "billing_address": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The Partner's billing address",
                "minLength": 1,
                "maxLength": 255
              },
              "street": {
                "type": "string",
                "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                "example": "Unit 2/4,123 Fake St",
                "minLength": 1,
                "maxLength": 255
              },
              "city": {
                "type": "string",
                "description": "The City/Suburb as a **string**.",
                "example": "North Haverbrook",
                "minLength": 1,
                "maxLength": 255
              },
              "state_code": {
                "$ref": "#/components/schemas/AddressRegions"
              },
              "postcode": {
                "type": "string",
                "description": "The Postcode as a **string** 4 digits in length.",
                "example": 2000,
                "minLength": 4,
                "maxLength": 4
              },
              "country_code": {
                "$ref": "#/components/schemas/AddressCountries"
              }
            },
            "required": [
              "street",
              "city",
              "state_code",
              "postcode",
              "country_code"
            ]
          }
        },
        "required": [
          "name",
          "location",
          "user",
          "billing_address"
        ]
      },
      "Recaptcha": {
        "type": "string",
        "description": "The security token generated by Google reCaptcha's `execute` action. Required for public/unauthenticated sessions."
      },
      "GetRedactedPartnerRequest": {
        "type": "object",
        "properties": {
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha",
            "description": "The security token generated by Google reCaptcha's `execute` action. The expected action value is `get_redacted_partner`."
          }
        },
        "required": [
          "security_token"
        ]
      },
      "RedactedLocation": {
        "type": "object",
        "description": "A redacted Location object, to prevent exposing sensitive information when used in public APIs.\n\nThe redacted fields include:\n\n- created_at\n- updated_at\n- is_enabled\n- image_dropoff\n- courier_location\n- is_default\n- enable_notifications\n",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contact_name": {
            "type": "string",
            "description": "The Location's main contact name.",
            "maxLength": 255
          },
          "contact_email": {
            "type": "string",
            "description": "The Location's main contact email.",
            "maxLength": 255
          },
          "contact_phone": {
            "type": "string",
            "description": "The Location's main contact phone number."
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "is_pickup_location": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "is_default": {
            "type": "boolean",
            "description": "This is used to set the default `Location` **per Partner**."
          },
          "support_name": {
            "type": "string",
            "description": "The Location's support contact name."
          },
          "support_email": {
            "type": "string",
            "description": "The Location's support contact email."
          },
          "support_phone": {
            "type": "string",
            "description": "The Location's support contact phone number."
          },
          "address_id": {
            "type": "integer"
          },
          "google_place_id": {
            "type": "string",
            "description": "The Google Place ID for the Location, which can be identified [here](https://developers.google.com/maps/documentation/places/web-service/place-id).",
            "minLength": 1,
            "maxLength": 65535
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "available_couriers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourierTypes"
            }
          },
          "available_integrations": {
            "$ref": "#/components/schemas/AvailableIntegrations"
          },
          "policies": {
            "$ref": "#/components/schemas/PoliciesResponse"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "contact_name",
          "contact_email",
          "contact_phone",
          "is_pickup_location",
          "partner_id",
          "is_default",
          "address_id",
          "address",
          "available_couriers",
          "policies",
          "available_integrations"
        ]
      },
      "GetRedactedPartnerResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Partner"
          }
        ],
        "properties": {
          "locations": {
            "type": "array",
            "description": "A list of enabled locations for this partner.",
            "items": {
              "$ref": "#/components/schemas/RedactedLocation"
            }
          },
          "available_couriers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourierTypes"
            }
          },
          "available_integrations": {
            "$ref": "#/components/schemas/AvailableIntegrations"
          },
          "policies": {
            "$ref": "#/components/schemas/PoliciesResponse"
          }
        },
        "required": [
          "id",
          "name",
          "reference",
          "available_couriers",
          "available_integrations",
          "policies"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "last_seen": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "telephone": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "is_email_verified": {
            "type": "boolean"
          },
          "is_account_disabled": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "role_code": {
            "$ref": "#/components/schemas/UserRoles"
          },
          "reference": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "first_name",
          "last_name",
          "email",
          "created_at",
          "last_seen",
          "password",
          "is_email_verified",
          "is_account_disabled",
          "partner_id",
          "role_code"
        ]
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "telephone": {
            "type": "string"
          },
          "is_email_verified": {
            "type": "boolean"
          },
          "is_account_disabled": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "role_code": {
            "$ref": "#/components/schemas/UserRoles"
          }
        }
      },
      "Locations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Location"
        }
      },
      "CreateLocationRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contact_name": {
            "type": "string",
            "description": "The Location's main contact name.",
            "maxLength": 255
          },
          "contact_email": {
            "type": "string",
            "description": "The Location's main contact email.",
            "maxLength": 255
          },
          "contact_phone": {
            "type": "string",
            "description": "The Location's main contact phone number."
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "is_pickup_location": {
            "type": "boolean"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "address_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "image_dropoff": {
            "type": "string"
          },
          "courier_location_id": {
            "type": "integer"
          },
          "is_default": {
            "type": "boolean",
            "description": "This is used to set the default `Location` **per Partner**. This will replace the current `is_default` field for an existing location."
          },
          "support_name": {
            "type": "string",
            "description": "The Location's support contact name."
          },
          "support_email": {
            "type": "string",
            "description": "The Location's support contact email."
          },
          "support_phone": {
            "type": "string",
            "description": "The Location's support contact phone number."
          },
          "enable_notifications": {
            "type": "boolean",
            "description": "Whether the Location has notifications enabled."
          },
          "google_place_id": {
            "type": "string",
            "description": "The Google Place ID for the Location, which can be identified [here](https://developers.google.com/maps/documentation/places/web-service/place-id).",
            "minLength": 1,
            "maxLength": 65535
          }
        },
        "required": [
          "code",
          "name",
          "contact_name",
          "contact_email",
          "contact_phone",
          "is_pickup_location",
          "is_enabled",
          "address_id",
          "partner_id",
          "is_default"
        ]
      },
      "UpdateLocationRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contact_name": {
            "type": "string",
            "description": "The Location's main contact name.",
            "maxLength": 255
          },
          "contact_email": {
            "type": "string",
            "description": "The Location's main contact email.",
            "maxLength": 255
          },
          "contact_phone": {
            "type": "string",
            "description": "The Location's main contact phone number."
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "is_pickup_location": {
            "type": "boolean"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "address_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "image_dropoff": {
            "type": "string"
          },
          "courier_location_id": {
            "type": "integer"
          },
          "is_default": {
            "type": "boolean",
            "description": "This is used to set the default `Location` **per Partner**. This will replace the current `is_default` field for an existing location."
          },
          "support_name": {
            "type": "string",
            "description": "The Location's support contact name."
          },
          "support_email": {
            "type": "string",
            "description": "The Location's support contact email."
          },
          "support_phone": {
            "type": "string",
            "description": "The Location's support contact phone number."
          },
          "enable_notifications": {
            "type": "boolean",
            "description": "Whether the Location has notifications enabled."
          },
          "google_place_id": {
            "type": "string",
            "description": "The Google Place ID for the Location, which can be identified [here](https://developers.google.com/maps/documentation/places/web-service/place-id).",
            "minLength": 1,
            "maxLength": 65535
          }
        }
      },
      "MessageSeverities": {
        "type": "integer",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "MessageTypes": {
        "type": "string",
        "enum": [
          "info",
          "error",
          "notification"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "severity": {
            "$ref": "#/components/schemas/MessageSeverities"
          },
          "type_code": {
            "$ref": "#/components/schemas/MessageTypes"
          },
          "module": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "requires_action": {
            "type": "boolean"
          },
          "is_public": {
            "type": "boolean"
          },
          "is_read": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "partner_id": {
            "type": "integer"
          },
          "integration_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "severity",
          "type_code",
          "title",
          "message",
          "requires_action",
          "is_public",
          "is_read",
          "created_at",
          "updated_at",
          "partner_id",
          "integration_id"
        ]
      },
      "Messages": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Message"
        }
      },
      "CreateMessageRequest": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/MessageSeverities"
          },
          "type_code": {
            "$ref": "#/components/schemas/MessageTypes"
          },
          "module": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "requires_action": {
            "type": "boolean"
          },
          "is_public": {
            "type": "boolean"
          },
          "is_read": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "integration_id": {
            "type": "integer"
          }
        },
        "required": [
          "severity",
          "type_code",
          "title",
          "message",
          "requires_action",
          "is_public",
          "is_read",
          "partner_id",
          "integration_id"
        ]
      },
      "UpdateMessageRequest": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/MessageSeverities"
          },
          "type_code": {
            "$ref": "#/components/schemas/MessageTypes"
          },
          "module": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "requires_action": {
            "type": "boolean"
          },
          "is_public": {
            "type": "boolean"
          },
          "is_read": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "integration_id": {
            "type": "integer"
          }
        }
      },
      "NotificationTypes": {
        "type": "string",
        "enum": [
          "email",
          "sms",
          "push"
        ]
      },
      "NotificationSources": {
        "type": "string",
        "enum": [
          "queue_reminder",
          "order_creation_from_cart",
          "order_creation_from_scripts",
          "order_creation_from_other"
        ]
      },
      "SendNotificationRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The `message` property is used to set the Notification message contents. The maximum length for a SMS message is 1000 characters."
          },
          "subject": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "contact": {
            "type": "string"
          },
          "notification_type_code": {
            "$ref": "#/components/schemas/NotificationTypes"
          },
          "user_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "queue_id": {
            "type": "integer"
          },
          "order_id": {
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/NotificationSources"
          }
        },
        "required": [
          "message",
          "contact",
          "notification_type_code",
          "partner_id"
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "maxLength": 160
          },
          "contact": {
            "type": "string"
          },
          "notification_type_code": {
            "$ref": "#/components/schemas/NotificationTypes"
          },
          "provider_sent_at": {
            "type": "string",
            "format": "date-time"
          },
          "provider_ref": {
            "type": "string"
          },
          "total_cost": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "subject": {
            "type": "string",
            "maxLength": 255
          },
          "queue_id": {
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/NotificationSources"
          },
          "order_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "created_at",
          "message",
          "contact",
          "notification_type_code",
          "partner_id",
          "user_id"
        ]
      },
      "EmailTypes": {
        "type": "string",
        "enum": [
          "courier",
          "pickup_matic",
          "support",
          "pending_cart"
        ]
      },
      "ProcessNotificationNewRequest": {
        "type": "object",
        "properties": {
          "notification_type_code": {
            "$ref": "#/components/schemas/NotificationTypes"
          },
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha"
          },
          "subject": {
            "type": "string",
            "description": "The `subject` property is required if the \"email\" Notification type is used.",
            "minLength": 1,
            "maxLength": 255
          },
          "message": {
            "type": "string",
            "description": "The `message` property is used to set the Notification message contents. The maximum length for a SMS message is 1000 characters."
          },
          "partner": {
            "type": "object",
            "description": "The `partner` property is used to assign the Order's Partner and dispatch Location.",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1
              },
              "user_id": {
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "contact": {
            "type": "object",
            "description": "The `contact` property is used to assign the Notification's contact details.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "description": "The `email` property is required if the \"email\" Notification Type is used.",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The `email` property is required if the\"sms\" Notification Type is used, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              }
            },
            "required": [
              "first_name",
              "last_name"
            ]
          },
          "queue_id": {
            "type": "integer",
            "minimum": 1
          },
          "order_id": {
            "type": "integer",
            "minimum": 1
          },
          "email_type_code": {
            "$ref": "#/components/schemas/EmailTypes"
          },
          "source": {
            "$ref": "#/components/schemas/NotificationSources"
          }
        },
        "required": [
          "notification_type_code",
          "security_token",
          "message",
          "partner",
          "contact"
        ]
      },
      "CreateIntegrationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sync_freq": {
            "type": "integer"
          },
          "sync_window": {
            "type": "integer"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "api_url": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "api_username": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "api_key": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "partner_id": {
            "type": "integer"
          },
          "type_code": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "mode_code": {
            "$ref": "#/components/schemas/IntegrationModes"
          },
          "api_public_key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 65535
          },
          "public_url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048
          }
        },
        "required": [
          "name",
          "sync_freq",
          "is_enabled",
          "partner_id",
          "type_code",
          "mode_code"
        ]
      },
      "UpdateIntegrationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sync_freq": {
            "type": "integer"
          },
          "sync_window": {
            "type": "integer"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "api_url": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "api_username": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "api_key": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "partner_id": {
            "type": "integer"
          },
          "type_code": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "mode_code": {
            "$ref": "#/components/schemas/IntegrationModes"
          },
          "api_public_key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 65535
          },
          "public_url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048
          }
        }
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sync_freq": {
            "type": "integer"
          },
          "sync_window": {
            "type": "integer"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "api_url": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "api_username": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "api_key": {
            "type": "string",
            "writeOnly": true,
            "format": "password"
          },
          "partner_id": {
            "type": "integer"
          },
          "type_code": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "mode_code": {
            "$ref": "#/components/schemas/IntegrationModes"
          },
          "last_synced_at": {
            "type": "string",
            "readOnly": true,
            "format": "date-time"
          },
          "reference": {
            "type": "string"
          },
          "api_public_key": {
            "type": "string",
            "maxLength": 65535
          },
          "public_url": {
            "type": "string",
            "maxLength": 65535
          }
        },
        "required": [
          "id",
          "name",
          "sync_freq",
          "is_enabled",
          "created_at",
          "partner_id",
          "type_code",
          "mode_code"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "IntegrationsProcessImportResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "import_count": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "import_count",
              "message"
            ]
          }
        }
      },
      "DeliveryTypes": {
        "type": "string",
        "enum": [
          "custom",
          "express",
          "free",
          "in_store",
          "locker",
          "pickup",
          "same_day",
          "standard",
          "unknown",
          "external_pickup"
        ]
      },
      "PrescriptionEntitlementTypes": {
        "type": "string",
        "description": "Required if `item.is_prescription = true`",
        "enum": [
          "pbs",
          "private",
          "concession",
          "safety_net"
        ]
      },
      "CreateCartRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "location_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "is_enabled": {
            "type": "boolean"
          },
          "feature": {
            "description": "The `cart.feature` ENUM definition is only valid for the `carts` and `scripts` features.",
            "$ref": "#/components/schemas/PolicyFeature"
          },
          "requires_delivery": {
            "type": "boolean"
          },
          "requires_payment": {
            "type": "boolean"
          },
          "valid_to": {
            "description": "The `valid_to` property is used to configure the Cart's expiry date. If this property is not set, the Cart will remain active.",
            "type": "string",
            "format": "date-time"
          },
          "maximum_uses": {
            "type": "integer",
            "minimum": 0
          },
          "note": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "delivery": {
            "type": "object",
            "description": "The `delivery` property is used to for delivery fulfilment and notifications.  \n**Please note:** The delivery address should be set as the customer's billing address, if Click & Collect (pickup) is used as the delivery method. Alternatively, the `location` address can be used but it is advised to use the customer's email and phone number to allow for notifications.",
            "properties": {
              "delivery_type_code": {
                "$ref": "#/components/schemas/DeliveryTypes"
              },
              "courier_type_code": {
                "$ref": "#/components/schemas/CourierTypes"
              },
              "total": {
                "type": "string",
                "format": "bigdecimal",
                "x-rust-type": "bigdecimal::BigDecimal",
                "description": "Delivery Total in AUD, including Tax. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
                "example": 10000.12
              },
              "tax": {
                "type": "string",
                "format": "bigdecimal",
                "x-rust-type": "bigdecimal::BigDecimal",
                "description": "Delivery Tax in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
                "example": 10000.12
              },
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                    "example": "Unit 2/4,123 Fake St",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": "2000",
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "delivery_type_code",
              "total",
              "tax",
              "first_name",
              "last_name",
              "email",
              "phone",
              "address"
            ]
          },
          "billing": {
            "type": "object",
            "description": "The `billing` property is used to assign the Billing contact and address.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                    "example": "Unit 2/4,123 Fake St",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": "2000",
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone",
              "address"
            ]
          },
          "items": {
            "type": "array",
            "description": "The `items` property is used to assign the Cart's product(s)/item(s). The prescription-related fields are encrypted within the database.",
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "type": "string",
                  "example": "SD-CRM125G",
                  "minLength": 1,
                  "maxLength": 128
                },
                "name": {
                  "type": "string",
                  "example": "Sudocrem Healing Cream 125g",
                  "minLength": 1,
                  "maxLength": 255
                },
                "description": {
                  "type": "string",
                  "example": "Sudocrem Healing Cream 125g",
                  "maxLength": 512
                },
                "price": {
                  "type": "string",
                  "format": "bigdecimal",
                  "x-rust-type": "bigdecimal::BigDecimal",
                  "description": "The individual Item Price in AUD, including Tax. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
                  "example": 10000.12
                },
                "tax": {
                  "type": "string",
                  "format": "bigdecimal",
                  "x-rust-type": "bigdecimal::BigDecimal",
                  "description": "The individual Item Tax in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
                  "example": 10000.12
                },
                "discount": {
                  "type": "string",
                  "format": "bigdecimal",
                  "x-rust-type": "bigdecimal::BigDecimal",
                  "description": "The individual Item Discount in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
                  "example": 10000.12
                },
                "qty": {
                  "type": "integer"
                },
                "weight": {
                  "type": "string",
                  "format": "bigdecimal",
                  "x-rust-type": "bigdecimal::BigDecimal",
                  "description": "The individual Item Weight in kilograms."
                },
                "length": {
                  "type": "integer",
                  "description": "The individual Item Length in millimetres."
                },
                "width": {
                  "type": "integer",
                  "description": "The individual Item Width in millimetres."
                },
                "height": {
                  "type": "integer",
                  "description": "The individual Item Height in millimetres."
                },
                "is_prescription": {
                  "type": "boolean"
                },
                "prescription_first_name": {
                  "type": "string",
                  "description": "Required if `item.is_prescription = true`",
                  "minLength": 1,
                  "maxLength": 255
                },
                "prescription_last_name": {
                  "type": "string",
                  "description": "Required if `item.is_prescription = true`",
                  "minLength": 1,
                  "maxLength": 255
                },
                "prescription_token_number": {
                  "type": "string",
                  "description": "Required if `item.is_prescription = true`",
                  "minLength": 1,
                  "maxLength": 64
                },
                "prescription_entitlement": {
                  "$ref": "#/components/schemas/PrescriptionEntitlementTypes"
                },
                "prescription_entitlement_number": {
                  "type": "string",
                  "description": "The reference number for a Client's submitted `prescription_entitlement`.  \n**Entitlement number terminology:**  \n- Safety Net: CRN  \n- Concession: CRN  \n- Medicare: Medicare Number  \n- Private: None  \n",
                  "minLength": 1,
                  "maxLength": 64
                },
                "requires_contact": {
                  "type": "boolean"
                },
                "gtin": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "tpp": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              },
              "required": [
                "sku",
                "name",
                "qty"
              ]
            }
          }
        },
        "required": [
          "location_code",
          "is_enabled",
          "feature",
          "requires_delivery"
        ]
      },
      "Cart": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "valid_to": {
            "type": "string",
            "format": "date-time"
          },
          "partner_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string",
            "maxLength": 64
          },
          "user_id": {
            "type": "integer"
          },
          "reference": {
            "type": "string"
          },
          "delivery_type_code": {
            "$ref": "#/components/schemas/DeliveryTypes"
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes"
          },
          "total": {
            "deprecated": true,
            "description": "The order \"Grand Total\" which includes the Delivery amount, Item Totals, and subtracts the Discount amount.<br><br>**Formula** = (Order `delivery` + (Order Item(s) `qty_ordered` * `total`)) - Order `discount`",
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "tax": {
            "deprecated": true,
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "discount": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "delivery": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "delivery_tax": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "delivery_discount": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "billing_firstname": {
            "type": "string",
            "maxLength": 255
          },
          "billing_lastname": {
            "type": "string",
            "maxLength": 255
          },
          "billing_email": {
            "type": "string",
            "maxLength": 255
          },
          "billing_phone": {
            "type": "string",
            "maxLength": 255
          },
          "billing_street": {
            "type": "string",
            "maxLength": 255
          },
          "billing_city": {
            "type": "string",
            "maxLength": 255
          },
          "billing_state_code": {
            "type": "string",
            "maxLength": 255
          },
          "billing_postcode": {
            "type": "string",
            "maxLength": 255
          },
          "billing_country_code": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_firstname": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_lastname": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_email": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_phone": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_street": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_city": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_state_code": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_postcode": {
            "type": "string",
            "maxLength": 255
          },
          "delivery_country_code": {
            "type": "string",
            "maxLength": 255
          },
          "is_enabled": {
            "type": "boolean",
            "default": true
          },
          "uses": {
            "type": "integer",
            "default": 0
          },
          "maximum_uses": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "note": {
            "type": "string",
            "minLength": 1,
            "maxLength": 65535
          },
          "requires_delivery": {
            "type": "boolean",
            "default": true
          },
          "requires_payment": {
            "type": "boolean",
            "default": true
          },
          "feature": {
            "description": "The `cart.feature` ENUM definition is only valid for the `carts` and `scripts` features.",
            "$ref": "#/components/schemas/PolicyFeature",
            "minLength": 1,
            "maxLength": 7
          }
        },
        "required": [
          "id",
          "created_at",
          "partner_id",
          "location_code",
          "reference",
          "is_enabled",
          "uses",
          "requires_delivery",
          "feature"
        ]
      },
      "RedactedPartner": {
        "type": "object",
        "description": "A redacted Partner object, to prevent exposing sensitive information when used in public APIs.\n\nThe redacted fields include:\n\n- description\n- is_enabled\n- created_at\n- billing_address_id\n",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "reference": {
            "type": "string",
            "minLength": 1,
            "maxLength": 65535
          },
          "brand_colour": {
            "type": "string",
            "description": "The hex colour code of the partner's brand",
            "maxLength": 6
          },
          "website_url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048
          }
        },
        "required": [
          "id",
          "name",
          "reference"
        ]
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "cart_id": {
            "type": "integer"
          },
          "sku": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 512
          },
          "price": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "weight": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "length": {
            "type": "integer",
            "minimum": 0
          },
          "width": {
            "type": "integer",
            "minimum": 0
          },
          "height": {
            "type": "integer",
            "minimum": 0
          },
          "tax": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "discount": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "partner_id": {
            "type": "integer",
            "minimum": 0
          },
          "user_id": {
            "type": "integer",
            "minimum": 0
          },
          "reference": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "is_prescription": {
            "type": "boolean"
          },
          "prescription_first_name": {
            "type": "string",
            "maxLength": 255
          },
          "prescription_last_name": {
            "type": "string",
            "maxLength": 255
          },
          "prescription_token_number": {
            "type": "string",
            "maxLength": 255
          },
          "prescription_entitlement": {
            "type": "string",
            "maxLength": 255
          },
          "prescription_entitlement_number": {
            "type": "string",
            "maxLength": 255,
            "description": "The reference number for a Client's submitted `prescription_entitlement`.  \n**Entitlement number terminology:**  \n- Safety Net: CRN  \n- Concession: CRN  \n- Medicare: Medicare Number  \n- Private: None  \n"
          },
          "requires_contact": {
            "type": "boolean"
          },
          "qty": {
            "type": "integer",
            "minimum": 1
          },
          "gtin": {
            "type": "string",
            "maxLength": 255
          },
          "tpp": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "cart_id",
          "sku",
          "name",
          "partner_id",
          "reference",
          "qty"
        ]
      },
      "CartItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CartItem"
        }
      },
      "CartWithItems": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Cart"
          }
        ],
        "properties": {
          "partner": {
            "$ref": "#/components/schemas/RedactedPartner"
          },
          "location": {
            "$ref": "#/components/schemas/RedactedLocation"
          },
          "items": {
            "$ref": "#/components/schemas/CartItems"
          }
        },
        "required": [
          "id",
          "created_at",
          "partner_id",
          "location_code",
          "reference",
          "partner",
          "location",
          "items"
        ]
      },
      "UpdateCartRequest": {
        "type": "object",
        "properties": {
          "valid_to": {
            "description": "The `valid_to` property is used to configure the Cart's expiry date. If this property is not set, the Cart will remain active.",
            "type": "string",
            "format": "date-time"
          },
          "delivery_firstname": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "delivery_lastname": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "delivery_email": {
            "type": "string",
            "format": "email",
            "minLength": 4,
            "maxLength": 255
          },
          "delivery_phone": {
            "type": "string",
            "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
            "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
            "example": "+61431471915",
            "minLength": 6,
            "maxLength": 14
          },
          "is_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "note": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          }
        }
      },
      "FilterFields": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "CreatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "CreatedAt"
            ]
          },
          {
            "type": "object",
            "properties": {
              "StatusCode": {
                "type": "string"
              }
            },
            "required": [
              "StatusCode"
            ]
          },
          {
            "type": "object",
            "properties": {
              "PartnerId": {
                "type": "integer"
              }
            },
            "required": [
              "PartnerId"
            ]
          },
          {
            "type": "object",
            "properties": {
              "LocationCode": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Operation": {
        "type": "string",
        "enum": [
          "EqualTo",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThan",
          "LessThanOrEqualTo"
        ]
      },
      "FilterOperation": {
        "type": "object",
        "description": "The list of filter operations to apply sequentially. \n",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FilterFields"
          },
          "operation": {
            "$ref": "#/components/schemas/Operation"
          }
        },
        "required": [
          "field",
          "operation"
        ]
      },
      "PageRequest": {
        "type": "object",
        "properties": {
          "page_number": {
            "type": "integer",
            "minimum": 1,
            "maximum": 300
          },
          "page_size": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          }
        },
        "required": [
          "page_number",
          "page_size"
        ]
      },
      "SortingField": {
        "type": "string",
        "enum": [
          "CreatedAt",
          "UpdatedAt",
          "StatusCode",
          "PartnerId",
          "LocationCode"
        ]
      },
      "SortingDirection": {
        "type": "string",
        "enum": [
          "Ascending",
          "Descending"
        ]
      },
      "SortingItem": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/SortingField"
          },
          "direction": {
            "$ref": "#/components/schemas/SortingDirection"
          }
        },
        "required": [
          "field",
          "direction"
        ]
      },
      "Filter": {
        "type": "object",
        "properties": {
          "filter_chain": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterOperation"
            }
          },
          "pagination": {
            "type": "object",
            "$ref": "#/components/schemas/PageRequest"
          },
          "sorting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortingItem"
            }
          }
        },
        "required": [
          "pagination",
          "filter_chain",
          "sorting"
        ]
      },
      "Page": {
        "type": "object",
        "properties": {
          "page_number": {
            "type": "integer",
            "minimum": 1,
            "description": "The page that has been returned"
          },
          "last_page_number": {
            "type": "integer",
            "minimum": 1,
            "description": "The last page available at the current page size"
          },
          "page_size": {
            "type": "integer",
            "minimum": 1,
            "description": "The number of orders shown on one page"
          }
        },
        "required": [
          "page_number",
          "last_page_number",
          "page_size"
        ]
      },
      "Carts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Cart"
        }
      },
      "PagedCarts": {
        "type": "object",
        "properties": {
          "page_info": {
            "$ref": "#/components/schemas/Page"
          },
          "carts": {
            "$ref": "#/components/schemas/Carts"
          }
        },
        "required": [
          "carts"
        ]
      },
      "CartLookupRequest": {
        "type": "object",
        "properties": {
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha"
          }
        },
        "required": [
          "security_token"
        ]
      },
      "OrderTypes": {
        "type": "string",
        "enum": [
          "sale",
          "appointment"
        ]
      },
      "PaymentMethods": {
        "type": "string",
        "enum": [
          "card"
        ]
      },
      "CreateOrderRequest": {
        "type": "object",
        "properties": {
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha"
          },
          "order_type_code": {
            "$ref": "#/components/schemas/OrderTypes"
          },
          "partner": {
            "type": "object",
            "description": "The `partner` property is used to assign the Order's Partner and dispatch Location.",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1,
                "description": "The Partner ID must be set for orders created using a public session. (ie. Scripts, Carts)"
              },
              "location_code": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64
              }
            },
            "required": [
              "location_code"
            ]
          },
          "customer": {
            "type": "object",
            "description": "The `customer` property is used to assign the Order's Customer details.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone"
            ]
          },
          "delivery": {
            "type": "object",
            "description": "The `delivery` property is used to for delivery fulfilment and notifications.  \n**Please note:** The delivery address should be set as the customer's billing address, if Click & Collect (pickup) is used as the delivery method. Alternatively, the `location` address can be used but it is advised to use the customer's email and phone number to allow for notifications.",
            "properties": {
              "delivery_type_code": {
                "$ref": "#/components/schemas/DeliveryTypes"
              },
              "courier_type_code": {
                "$ref": "#/components/schemas/CourierTypes"
              },
              "total": {
                "type": "number",
                "description": "Delivery Total in AUD, including Tax. This should be rounded to 2 decimal places, as that is what is sent to the payment provider.",
                "example": 10000.12,
                "minimum": 0
              },
              "tax": {
                "type": "number",
                "description": "Delivery Tax in AUD. This should be rounded to 2 decimal places, as that is what is sent to the payment provider.",
                "example": 10000.12,
                "minimum": 0
              },
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                    "example": "Unit 2/4,123 Fake St",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": "2000",
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone",
              "address"
            ]
          },
          "billing": {
            "type": "object",
            "description": "The `billing` property is used to assign the Billing contact and address.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                    "example": "Unit 2/4,123 Fake St",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": "2000",
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone",
              "address"
            ]
          },
          "payment": {
            "type": "object",
            "description": "The `payment` property should be used when an Order requires payment, and is used to assign the Payment Method, and submit the Customer's payment details for processing, which are not stored in our database. Currently, only payments by Credit Card are supported.",
            "properties": {
              "payment_method_code": {
                "$ref": "#/components/schemas/PaymentMethods"
              },
              "total": {
                "type": "number",
                "description": "The order Grand Total in AUD, including Tax. This should be rounded to 2 decimal places, as that is what is sent to the payment provider. This must equal the Delivery Total + the Price for all Items.",
                "example": 10000.12,
                "minimum": 0
              },
              "tax": {
                "type": "number",
                "description": "The total order Tax in AUD. This should be rounded to 2 decimal places, as that is what is sent to the payment provider. This must equal the Delivery Tax + the Tax for all Items.",
                "example": 10000.12,
                "minimum": 0
              },
              "card_name": {
                "type": "string",
                "description": "The Credit Card's full name as it appears on the card.",
                "example": "Alex H Watson",
                "minLength": 1,
                "maxLength": 255
              },
              "card_number": {
                "type": "string",
                "description": "The Credit Card's number as a **string** without spaces.",
                "example": "4242424242424242",
                "minLength": 1,
                "maxLength": 16
              },
              "card_expiry_month": {
                "type": "integer",
                "description": "The Credit Card's expiry month as an **integer** without a leading zero.",
                "example": 8,
                "minimum": 1,
                "maximum": 12
              },
              "card_expiry_year": {
                "type": "integer",
                "description": "The Credit Card's expiry year as an **integer** 2 digits in length.",
                "example": 29,
                "minimum": 23,
                "maximum": 99
              },
              "card_cvc": {
                "type": "string",
                "description": "The Credit Card's CVC/CVV as an **integer** 3-4 digits in length.",
                "example": "123",
                "minLength": 3,
                "maxLength": 4
              },
              "auth": {
                "type": "object",
                "description": "This should contain the payment provider authorisation properties returned by a successful \"Order Payment Authorisation\" API request. This is required if the payment method is type `card`.",
                "properties": {
                  "order_ref": {
                    "type": "string",
                    "description": "This contains the Order Reference generated by SparrowHub for this order.",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "transaction_ref": {
                    "type": "string",
                    "description": "This contains the Transaction Reference generated by SparrowHub for this order.",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "provider_ref": {
                    "type": "string",
                    "description": "This contains the Transaction ID generated by the Payment Provider for this order.",
                    "minLength": 1,
                    "maxLength": 128
                  }
                },
                "required": [
                  "order_ref",
                  "transaction_ref",
                  "provider_ref"
                ]
              }
            },
            "required": [
              "payment_method_code",
              "total",
              "tax",
              "card_name",
              "card_number",
              "card_expiry_month",
              "card_expiry_year",
              "card_cvc",
              "auth"
            ]
          },
          "items": {
            "type": "array",
            "description": "The `items` property is used to assign the Order's product(s)/item(s). The prescription-related fields are encrypted within the database.",
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "type": "string",
                  "example": "SD-CRM125G",
                  "minLength": 1,
                  "maxLength": 128
                },
                "name": {
                  "type": "string",
                  "example": "Sudocrem Healing Cream 125g",
                  "minLength": 1,
                  "maxLength": 255
                },
                "qty": {
                  "type": "integer",
                  "example": 1,
                  "minimum": 1
                },
                "price": {
                  "type": "number",
                  "description": "The individual Item Price in AUD, including Tax. This should be rounded to 2 decimal places, as that is what is sent to the payment provider.",
                  "example": 10000.12,
                  "minimum": 0
                },
                "tax": {
                  "type": "number",
                  "description": "The individual Item Tax in AUD. This should be rounded to 2 decimal places, as that is what is sent to the payment provider.",
                  "example": 10000.12,
                  "minimum": 0
                },
                "is_prescription": {
                  "type": "boolean"
                },
                "prescription_first_name": {
                  "type": "string",
                  "description": "Required if `item.is_prescription = true`",
                  "minLength": 1,
                  "maxLength": 255
                },
                "prescription_last_name": {
                  "type": "string",
                  "description": "Required if `item.is_prescription = true`",
                  "minLength": 1,
                  "maxLength": 255
                },
                "prescription_token_number": {
                  "type": "string",
                  "description": "Required if `item.is_prescription = true`"
                },
                "prescription_entitlement": {
                  "$ref": "#/components/schemas/PrescriptionEntitlementTypes"
                },
                "prescription_entitlement_number": {
                  "type": "string",
                  "description": "The reference number for a Client's submitted `prescription_entitlement`.  \n**Entitlement number terminology:**  \n- Safety Net: CRN  \n- Concession: CRN  \n- Medicare: Medicare Number  \n- Private: None  \n"
                },
                "cost": {
                  "type": "number"
                },
                "gtin": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "pde_id": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "supplier_id": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "preferred_supplier": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "drug_schedule": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "requires_contact": {
                  "type": "boolean"
                },
                "length": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 99999
                },
                "width": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 99999
                },
                "height": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 99999
                }
              },
              "required": [
                "sku",
                "name",
                "qty",
                "price",
                "tax",
                "is_prescription"
              ]
            }
          },
          "from_cart_id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the Cart this Order was generated from, if applicable."
          }
        },
        "required": [
          "order_type_code",
          "partner",
          "customer",
          "billing",
          "items"
        ]
      },
      "OrderStatuses": {
        "type": "string",
        "enum": [
          "new",
          "on_hold",
          "fraud",
          "cancelled",
          "awaiting_review",
          "awaiting_payment",
          "awaiting_pickup",
          "awaiting_processing",
          "awaiting_dropoff",
          "awaiting_appointment",
          "awaiting_courier",
          "in_transit",
          "complete",
          "refunded",
          "archived"
        ]
      },
      "OrderPlatformPaymentMethods": {
        "type": "string",
        "enum": [
          "stripe",
          "paypal",
          "tyro_mastercard",
          "tyro",
          "direct_deposit",
          "amazon",
          "ebay",
          "unknown"
        ]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "order_id": {
            "type": "integer"
          },
          "sku": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "total": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "qty_ordered": {
            "type": "integer"
          },
          "qty_shipped": {
            "type": "integer"
          },
          "qty_refunded": {
            "type": "integer"
          },
          "total_weight": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "tax": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "discount": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "discount_tax_offset": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "platform_product_id": {
            "type": "string"
          },
          "platform_order_item_id": {
            "type": "string"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "platform_invoice_item_id": {
            "type": "integer"
          },
          "is_prescription": {
            "type": "boolean"
          },
          "reference": {
            "type": "string"
          },
          "prescription_token": {
            "deprecated": true,
            "type": "string"
          },
          "prescription_phone": {
            "deprecated": true,
            "type": "string"
          },
          "prescription_name": {
            "deprecated": true,
            "type": "string"
          },
          "prescription_concession": {
            "deprecated": true,
            "type": "string"
          },
          "prescription_first_name": {
            "type": "string"
          },
          "prescription_last_name": {
            "type": "string"
          },
          "prescription_token_number": {
            "type": "string"
          },
          "prescription_entitlement": {
            "type": "string"
          },
          "prescription_entitlement_number": {
            "type": "string",
            "description": "The reference number for a Client's submitted `prescription_entitlement`.  \n**Entitlement number terminology:**  \n- Safety Net: CRN  \n- Concession: CRN  \n- Medicare: Medicare Number  \n- Private: None  \n"
          },
          "cost": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "gtin": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "pde_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "supplier_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "preferred_supplier": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "drug_schedule": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "requires_contact": {
            "type": "boolean"
          },
          "length": {
            "type": "integer",
            "minimum": 1,
            "maximum": 99999
          },
          "width": {
            "type": "integer",
            "minimum": 1,
            "maximum": 99999
          },
          "height": {
            "type": "integer",
            "minimum": 1,
            "maximum": 99999
          }
        },
        "required": [
          "id",
          "created_at",
          "order_id",
          "sku",
          "name",
          "partner_id",
          "requires_contact"
        ]
      },
      "OrderItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OrderItem"
        }
      },
      "OrderStates": {
        "type": "string",
        "enum": [
          "new",
          "pending",
          "processing",
          "complete"
        ]
      },
      "OrderNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "note": {
            "type": "string"
          },
          "order_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "is_visible": {
            "type": "boolean"
          },
          "refund_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "created_at",
          "note",
          "partner_id",
          "is_visible"
        ]
      },
      "OrderNotes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OrderNote"
        }
      },
      "DeliveryModels": {
        "type": "string",
        "enum": [
          "shipment-collection",
          "shipment-dropoff",
          "return",
          "self-delivery"
        ]
      },
      "ReservationStatus": {
        "type": "string",
        "enum": [
          "created",
          "incomplete",
          "complete",
          "robotReservationFailed",
          "deliveryRequested",
          "deliveryRequestFailed",
          "delivered",
          "deliveryFailed",
          "pickedUp",
          "pickUpFailed",
          "canceled"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ordered_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_type_code": {
            "$ref": "#/components/schemas/DeliveryTypes"
          },
          "status_code": {
            "$ref": "#/components/schemas/OrderStatuses"
          },
          "platform_customer_id": {
            "type": "integer"
          },
          "platform_order_id": {
            "type": "string"
          },
          "platform_order_no": {
            "type": "string"
          },
          "platform_payment_method": {
            "$ref": "#/components/schemas/OrderPlatformPaymentMethods"
          },
          "platform_delivery_method": {
            "type": "string"
          },
          "customer_email": {
            "type": "string"
          },
          "customer_firstname": {
            "type": "string"
          },
          "customer_lastname": {
            "type": "string"
          },
          "total": {
            "description": "The order \"Grand Total\" which includes the Delivery amount, Item Totals, and subtracts the Discount amount.<br><br>**Formula** = (Order `delivery` + (Order Item(s) `qty_ordered` * `total`)) - Order `discount`",
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "total_paid": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "total_owing": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "tax": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "discount": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "delivery": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "delivery_tax": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "delivery_discount": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "billing_firstname": {
            "type": "string"
          },
          "billing_lastname": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_phone": {
            "type": "string"
          },
          "billing_street": {
            "type": "string"
          },
          "billing_city": {
            "type": "string"
          },
          "billing_state_code": {
            "type": "string"
          },
          "billing_postcode": {
            "type": "string"
          },
          "billing_country_code": {
            "type": "string"
          },
          "delivery_firstname": {
            "type": "string"
          },
          "delivery_lastname": {
            "type": "string"
          },
          "delivery_email": {
            "type": "string"
          },
          "delivery_phone": {
            "type": "string"
          },
          "delivery_street": {
            "type": "string"
          },
          "delivery_city": {
            "type": "string"
          },
          "delivery_state_code": {
            "type": "string"
          },
          "delivery_postcode": {
            "type": "string"
          },
          "delivery_country_code": {
            "type": "string"
          },
          "integration_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "items": {
            "$ref": "#/components/schemas/OrderItems"
          },
          "user_id": {
            "type": "integer"
          },
          "order_type_code": {
            "$ref": "#/components/schemas/OrderTypes"
          },
          "order_state_code": {
            "$ref": "#/components/schemas/OrderStates"
          },
          "is_visible": {
            "type": "boolean"
          },
          "platform_invoice_id": {
            "type": "integer"
          },
          "refund_adjustment": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "refund_delivery": {
            "type": "string",
            "format": "bigdecimal",
            "x-rust-type": "bigdecimal::BigDecimal"
          },
          "notes": {
            "$ref": "#/components/schemas/OrderNotes"
          },
          "reference": {
            "type": "string"
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes"
          },
          "delivery_model_code": {
            "$ref": "#/components/schemas/DeliveryModels"
          },
          "customer_phone": {
            "type": "string"
          },
          "order_number": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "integration_type_code": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "initial_reservation_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "initial_reservation_status": {
            "$ref": "#/components/schemas/ReservationStatus"
          },
          "final_reservation_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "final_reservation_status": {
            "$ref": "#/components/schemas/ReservationStatus"
          },
          "cart_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "created_at",
          "ordered_at",
          "partner_id",
          "order_type_code",
          "order_state_code",
          "is_visible"
        ]
      },
      "UpdateOrderRequest": {
        "type": "object",
        "properties": {
          "ordered_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_type_code": {
            "$ref": "#/components/schemas/DeliveryTypes"
          },
          "status_code": {
            "$ref": "#/components/schemas/OrderStatuses"
          },
          "platform_customer_id": {
            "type": "integer"
          },
          "platform_order_id": {
            "type": "string"
          },
          "platform_order_no": {
            "type": "string"
          },
          "platform_payment_method": {
            "$ref": "#/components/schemas/OrderPlatformPaymentMethods"
          },
          "platform_delivery_method": {
            "type": "string"
          },
          "customer_firstname": {
            "type": "string"
          },
          "customer_lastname": {
            "type": "string"
          },
          "customer_email": {
            "type": "string"
          },
          "customer_phone": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "total_paid": {
            "type": "number"
          },
          "total_owing": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "delivery": {
            "type": "number"
          },
          "delivery_tax": {
            "type": "number"
          },
          "delivery_discount": {
            "type": "number"
          },
          "billing_firstname": {
            "type": "string"
          },
          "billing_lastname": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_phone": {
            "type": "string"
          },
          "billing_street": {
            "type": "string"
          },
          "billing_city": {
            "type": "string"
          },
          "billing_state_code": {
            "type": "string"
          },
          "billing_postcode": {
            "type": "string"
          },
          "billing_country_code": {
            "type": "string"
          },
          "delivery_firstname": {
            "type": "string"
          },
          "delivery_lastname": {
            "type": "string"
          },
          "delivery_email": {
            "type": "string"
          },
          "delivery_phone": {
            "type": "string"
          },
          "delivery_street": {
            "type": "string"
          },
          "delivery_city": {
            "type": "string"
          },
          "delivery_state_code": {
            "type": "string"
          },
          "delivery_postcode": {
            "type": "string"
          },
          "delivery_country_code": {
            "type": "string"
          },
          "integration_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "order_type_code": {
            "$ref": "#/components/schemas/OrderTypes"
          },
          "order_state_code": {
            "$ref": "#/components/schemas/OrderStates"
          },
          "is_visible": {
            "type": "boolean"
          },
          "platform_invoice_id": {
            "type": "integer"
          },
          "refund_adjustment": {
            "type": "number"
          },
          "refund_delivery": {
            "type": "number"
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes"
          },
          "delivery_model_code": {
            "$ref": "#/components/schemas/DeliveryModels"
          },
          "integration_type_code": {
            "$ref": "#/components/schemas/IntegrationTypes"
          },
          "initial_reservation_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "initial_reservation_status": {
            "$ref": "#/components/schemas/ReservationStatus"
          },
          "final_reservation_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "final_reservation_status": {
            "$ref": "#/components/schemas/ReservationStatus"
          },
          "cart_id": {
            "type": "integer"
          }
        }
      },
      "OrderPage": {
        "type": "object",
        "properties": {
          "page_info": {
            "$ref": "#/components/schemas/Page"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        },
        "required": [
          "orders"
        ]
      },
      "Orders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Order"
        }
      },
      "OrderLocationTransferRequest": {
        "type": "object",
        "properties": {
          "from_location_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "to_location_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": [
          "from_location_code",
          "to_location_code"
        ]
      },
      "ProcessOrderPickupNewRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "ProcessOrderPickupCompleteRequest": {
        "type": "object",
        "properties": {
          "order_note": {
            "type": "string"
          },
          "user_id": {
            "type": "integer"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "ProcessOrderUpdateStatusRequest": {
        "type": "object",
        "properties": {
          "status_code": {
            "$ref": "#/components/schemas/OrderStatuses"
          }
        },
        "required": [
          "status_code"
        ]
      },
      "OrderPaymentAuthenticationRequest": {
        "type": "object",
        "properties": {
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha"
          },
          "partner_id": {
            "type": "integer",
            "description": "The `partner_id` property is used to assign the Order's Partner.",
            "minimum": 1
          },
          "browser": {
            "type": "object",
            "description": "The `browser` property contains the client browser settings required by the Payment Provider.",
            "properties": {
              "challenge_window_size": {
                "type": "string",
                "description": "Dimensions of the challenge window (in width x height in pixels) displayed to the payer during 3D-Secure authentication.",
                "enum": [
                  "250_X_400",
                  "390_X_400",
                  "500_X_600",
                  "600_X_400",
                  "FULL_SCREEN"
                ]
              },
              "user_agent": {
                "type": "string",
                "description": "The client browser's `User Agent`",
                "example": "MOZILLA/4.0 (COMPATIBLE; MSIE 5.0; WINDOWS 95)",
                "minLength": 1,
                "maxLength": 2048
              },
              "language": {
                "type": "string",
                "description": "The language supported for the payer's browser as defined in IETF BCP47. You obtain this value from the `navigator.language` property of the payer's browser.",
                "example": "en-US",
                "minLength": 1,
                "maxLength": 8
              },
              "timezone": {
                "type": "string",
                "description": "Time difference between UTC time and the Cardholder browser local time, in minutes.  \nThe time zone offset is the difference, in minutes, between UTC and local time. Note that this means that the offset is positive if the local time zone is behind UTC and negative if it is ahead. For example, for time zone UTC+10:00 (Australian Eastern Standard Time, Vladivostok Time, Chamorro Standard Time), -600 would be presented.  \n",
                "example": -600,
                "minLength": 1,
                "maxLength": 4
              },
              "screen_color_depth": {
                "type": "integer",
                "description": "The bit depth (in bits per pixel) of the color palette for displaying images. You obtain this value from the `screen.colorDepth` property of the payer's browser.",
                "example": 24,
                "minimum": 1,
                "maximum": 48
              },
              "screen_width": {
                "type": "integer",
                "description": "The total width of the payer's browser screen in pixels. You obtain this value from the `screen.width` property of the payer's browser.",
                "example": 1920,
                "minimum": 1,
                "maximum": 999999
              },
              "screen_height": {
                "type": "integer",
                "description": "The total height of the payer's browser screen in pixels. You obtain this value from the `screen.height` property of the payer's browser.",
                "example": 866,
                "minimum": 1,
                "maximum": 999999
              },
              "is_java_enabled": {
                "type": "boolean",
                "description": "Indicates whether or not the payer's browser supports Java. You obtain this value from the `navigator.javaEnabled` property of the payer's browser."
              },
              "is_javascript_enabled": {
                "type": "boolean",
                "description": "Indicates whether or not the payer's browser supports JavaScript. You can determine this by setting the relevant value in a form to false, and then attempting to update it to true using JavaScript."
              }
            },
            "required": [
              "challenge_window_size",
              "user_agent",
              "accept_headers",
              "language",
              "timezone",
              "screen_color_depth",
              "screen_width",
              "screen_height",
              "is_java_enabled",
              "is_javascript_enabled"
            ]
          },
          "delivery": {
            "type": "object",
            "description": "The `delivery` property is used to for delivery fulfilment and notifications.  \n**Please note:** The delivery address should be set as the customer's billing address, if Click & Collect (pickup) is used as the delivery method. Alternatively, the `location` address can be used but it is advised to use the customer's email and phone number to allow for notifications.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                    "example": "Unit 2/4,123 Fake St",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": "2000",
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone",
              "address"
            ]
          },
          "billing": {
            "type": "object",
            "description": "The `billing` property is used to assign the Billing contact and address.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a comma-separated **string** with a maximum of 2 elements.",
                    "example": "Unit 2/4,123 Fake St",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": "2000",
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone",
              "address"
            ]
          },
          "payment": {
            "type": "object",
            "description": "The `payment` property should be used when an Order requires payment, and is used to assign the Payment Method, and submit the Customer's payment details for processing, which are not stored in our database. Currently, only payments by Credit Card are supported.",
            "properties": {
              "total": {
                "type": "number",
                "description": "The order Grand Total in AUD, including Tax. This should be rounded to 2 decimal places, as that is what is sent to the payment provider.",
                "example": 10000.12,
                "minimum": 0
              },
              "tax": {
                "type": "number",
                "description": "The total order Tax in AUD. This should be rounded to 2 decimal places, as that is what is sent to the payment provider.",
                "example": 10000.12,
                "minimum": 0
              },
              "card_name": {
                "type": "string",
                "description": "The Credit Card's full name as it appears on the card.",
                "example": "Alex H Watson",
                "minLength": 1,
                "maxLength": 255
              },
              "card_number": {
                "type": "string",
                "description": "The Credit Card's number as a **string** without spaces.",
                "example": "5123450000000008",
                "minLength": 1,
                "maxLength": 16
              },
              "card_expiry_month": {
                "type": "integer",
                "description": "The Credit Card's expiry month as an **integer** without a leading zero.",
                "example": 8,
                "minimum": 1,
                "maximum": 12
              },
              "card_expiry_year": {
                "type": "integer",
                "description": "The Credit Card's expiry year as an **integer** 2 digits in length.",
                "example": 29,
                "minimum": 23,
                "maximum": 99
              },
              "card_cvc": {
                "type": "string",
                "description": "The Credit Card's CVC/CVV as an **integer** 3-4 digits in length.",
                "example": "123",
                "minLength": 3,
                "maxLength": 4
              }
            },
            "required": [
              "total",
              "tax",
              "card_name",
              "card_number",
              "card_expiry_month",
              "card_expiry_year",
              "card_cvc"
            ]
          },
          "from_feature": {
            "description": "The ENUM definition is only valid for the `carts` and `scripts` features.",
            "$ref": "#/components/schemas/PolicyFeature",
            "minLength": 1,
            "maxLength": 7
          }
        },
        "required": [
          "security_token",
          "partner_id",
          "browser",
          "delivery",
          "billing",
          "payment"
        ]
      },
      "PaymentAuthenticationTypes": {
        "type": "string",
        "description": "The payment provider 3D-Secure authentication mechanism for the front-end to follow.",
        "enum": [
          "3ds2",
          "unenrolled"
        ]
      },
      "OrderPaymentAuthenticationResponse": {
        "type": "object",
        "description": "A response with the status 200 does not mean the provided card is valid to transact. It means the card was successfully authenticated and analysed. Please follow the `proceed_with_payment` and `proceed_with_3ds` results to decide next steps.",
        "properties": {
          "proceed_with_payment": {
            "type": "boolean",
            "description": "The payment Authentication result for the supplied card. Only continue with placing the Order and Payment if this is true."
          },
          "proceed_with_3ds": {
            "type": "boolean",
            "description": "The payment 3D-Secure result for the supplied card. Only use the front-end 3D-Secure implementation if this is true."
          },
          "order_reference": {
            "type": "string",
            "description": "The internal Order reference number that has been generated for a yet-to-be-created `Order` entity."
          },
          "transaction_reference": {
            "type": "string",
            "description": "The internal Transaction reference number that has been generated for a yet-to-be-created `Transaction` entity."
          },
          "provider_reference": {
            "type": "string",
            "description": "The internal transaction reference number that has been generated by the payment provider(Tyro)."
          },
          "payment_authentication_type": {
            "$ref": "#/components/schemas/PaymentAuthenticationTypes"
          },
          "payment_authentication_html": {
            "type": "string",
            "description": "The HTML content to be inserted in the front-end to progress the 3D-Secure flow. This replaces the use of the `payment_authentication_custom_postdata` and `payment_authentication_custom_url` properties."
          }
        },
        "required": [
          "proceed_with_payment",
          "proceed_with_3ds",
          "order_reference",
          "transaction_reference"
        ]
      },
      "CreateOrderNoteRequest": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string"
          },
          "order_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "is_visible": {
            "type": "boolean"
          },
          "refund_id": {
            "type": "integer"
          }
        },
        "required": [
          "note",
          "partner_id",
          "is_visible"
        ]
      },
      "UpdateOrderNoteRequest": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string"
          },
          "order_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "is_visible": {
            "type": "boolean"
          },
          "refund_id": {
            "type": "integer"
          }
        }
      },
      "RefundReasons": {
        "type": "string",
        "enum": [
          "duplicate",
          "fraud",
          "stock",
          "delivery",
          "ops",
          "customer_request",
          "customer_change_mind",
          "customer_mistake",
          "fulfilment_wrong_product",
          "fulfilment_faulty_product",
          "other"
        ]
      },
      "ProcessRefundRequest": {
        "type": "object",
        "properties": {
          "refund_reason": {
            "$ref": "#/components/schemas/RefundReasons"
          },
          "refund_delivery": {
            "type": "number",
            "minimum": 0,
            "description": "The Delivery amount to refund, otherwise, set to 0."
          },
          "refund_adjustment": {
            "type": "number",
            "minimum": 0,
            "description": "The Adjustment amount to refund, otherwise, set to 0. If the total \"Adjustment\" refunded for this order is \ngreater than the Order Item(s) total, or Delivery total, then those invoice items can no longer be refunded.\n"
          },
          "refund_items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "order_item_id": {
                  "type": "integer",
                  "minimum": 1
                },
                "refund_qty": {
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          },
          "notify_customer": {
            "type": "boolean"
          },
          "order_note": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          }
        },
        "required": [
          "refund_reason",
          "refund_delivery",
          "refund_adjustment",
          "notify_customer"
        ]
      },
      "RefundItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1,
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "refund_id": {
            "type": "integer",
            "minimum": 1
          },
          "sku": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "qty_refunded": {
            "type": "integer",
            "minimum": 1
          },
          "total": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "platform_product_id": {
            "type": "string"
          },
          "platform_order_item_id": {
            "type": "string"
          },
          "user_id": {
            "type": "integer",
            "minimum": 1
          },
          "partner_id": {
            "type": "integer",
            "minimum": 1
          },
          "platform_invoice_item_id": {
            "type": "integer",
            "minimum": 1
          },
          "order_item_id": {
            "type": "integer",
            "minimum": 1
          },
          "reference": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "refund_id",
          "sku",
          "name",
          "partner_id"
        ]
      },
      "RefundItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RefundItem"
        }
      },
      "Refund": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ordered_at": {
            "type": "string",
            "format": "date-time"
          },
          "refunded_at": {
            "type": "string",
            "format": "date-time"
          },
          "order_id": {
            "type": "integer"
          },
          "platform_refund_id": {
            "type": "string"
          },
          "location_code": {
            "type": "string"
          },
          "refund_reason_code": {
            "$ref": "#/components/schemas/RefundReasons"
          },
          "platform_order_id": {
            "type": "string"
          },
          "platform_order_no": {
            "type": "string"
          },
          "platform_payment_method": {
            "type": "string"
          },
          "total": {
            "description": "The original order \"Grand Total\" which includes the Delivery amount, Item Totals, and subtracts the Discount amount.<br><br>**Formula** = (Order `delivery` + (Order Item(s) `qty_ordered` * `total`)) - Order `discount`",
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "integration_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "items": {
            "$ref": "#/components/schemas/RefundItems"
          },
          "platform_invoice_id": {
            "type": "integer"
          },
          "refund_adjustment": {
            "type": "number"
          },
          "refund_delivery": {
            "type": "number"
          },
          "notes": {
            "$ref": "#/components/schemas/OrderNotes"
          },
          "reference": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "ordered_at",
          "order_id",
          "partner_id",
          "is_visible"
        ]
      },
      "Refunds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Refund"
        }
      },
      "UpdateRefundRequestItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1
          },
          "refund_id": {
            "type": "integer",
            "minimum": 1
          },
          "sku": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          },
          "qty_refunded": {
            "type": "integer",
            "minimum": 1
          },
          "total": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "platform_product_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "platform_order_item_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "user_id": {
            "type": "integer",
            "minimum": 1
          },
          "partner_id": {
            "type": "integer",
            "minimum": 1
          },
          "platform_invoice_item_id": {
            "type": "integer",
            "minimum": 1
          },
          "order_item_id": {
            "type": "integer",
            "minimum": 1
          },
          "reference": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateRefundRequest": {
        "type": "object",
        "properties": {
          "ordered_at": {
            "type": "string",
            "format": "date-time"
          },
          "refunded_at": {
            "type": "string",
            "format": "date-time"
          },
          "order_id": {
            "type": "integer",
            "minimum": 1
          },
          "platform_refund_id": {
            "deprecated": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "location_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "refund_reason_code": {
            "$ref": "#/components/schemas/RefundReasons"
          },
          "platform_order_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "platform_order_no": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "platform_payment_method": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "total": {
            "type": "number",
            "description": "The original Order's \"Grand Total\"."
          },
          "tax": {
            "type": "number",
            "description": "The original Order's total tax."
          },
          "integration_id": {
            "type": "integer",
            "minimum": 1
          },
          "partner_id": {
            "type": "integer",
            "minimum": 1
          },
          "user_id": {
            "type": "integer",
            "minimum": 1
          },
          "platform_invoice_id": {
            "type": "integer",
            "minimum": 1
          },
          "refund_adjustment": {
            "type": "number"
          },
          "refund_delivery": {
            "type": "number"
          },
          "reference": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateRefundRequestItem"
            }
          }
        }
      },
      "CourierModes": {
        "type": "string",
        "enum": [
          "live",
          "test"
        ]
      },
      "Courier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_synced_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "api_url_live": {
            "type": "string"
          },
          "api_url_test": {
            "type": "string"
          },
          "api_account_no_live": {
            "type": "string"
          },
          "api_account_no_test": {
            "type": "string"
          },
          "api_username_live": {
            "type": "string"
          },
          "api_username_test": {
            "type": "string"
          },
          "api_key_live": {
            "type": "string"
          },
          "api_key_test": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "courier_mode_code": {
            "$ref": "#/components/schemas/CourierModes"
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "created_at",
          "name",
          "is_enabled",
          "courier_mode_code",
          "courier_type_code",
          "partner_id"
        ]
      },
      "Couriers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Courier"
        }
      },
      "CreateCourierRequest": {
        "type": "object",
        "properties": {
          "last_synced_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "api_url_live": {
            "type": "string"
          },
          "api_url_test": {
            "type": "string"
          },
          "api_account_no_live": {
            "type": "string"
          },
          "api_account_no_test": {
            "type": "string"
          },
          "api_username_live": {
            "type": "string"
          },
          "api_username_test": {
            "type": "string"
          },
          "api_key_live": {
            "type": "string"
          },
          "api_key_test": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "courier_mode_code": {
            "$ref": "#/components/schemas/CourierModes"
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          }
        },
        "required": [
          "name",
          "is_enabled",
          "courier_mode_code",
          "courier_type_code",
          "partner_id"
        ]
      },
      "UpdateCourierRequest": {
        "type": "object",
        "properties": {
          "last_synced_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "api_url_live": {
            "type": "string"
          },
          "api_url_test": {
            "type": "string"
          },
          "api_account_no_live": {
            "type": "string"
          },
          "api_account_no_test": {
            "type": "string"
          },
          "api_username_live": {
            "type": "string"
          },
          "api_username_test": {
            "type": "string"
          },
          "api_key_live": {
            "type": "string"
          },
          "api_key_test": {
            "type": "string"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "courier_mode_code": {
            "$ref": "#/components/schemas/CourierModes"
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          }
        }
      },
      "CourierLocations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CourierLocation"
        }
      },
      "CreateCourierLocationRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contact_name": {
            "type": "string"
          },
          "contact_email": {
            "type": "string"
          },
          "contact_phone": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "courier_id": {
            "type": "integer"
          },
          "courier_type_code": {
            "type": "string"
          },
          "address_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "hours": {
            "type": "string"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "code",
          "name",
          "is_enabled",
          "courier_type_code"
        ]
      },
      "UpdateCourierLocationRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contact_name": {
            "type": "string"
          },
          "contact_email": {
            "type": "string"
          },
          "contact_phone": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "courier_id": {
            "type": "integer"
          },
          "courier_type_code": {
            "type": "string"
          },
          "address_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "hours": {
            "type": "string"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeliveryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_ref": {
            "type": "string"
          },
          "courier_tracking_code": {
            "type": "string"
          },
          "courier_atl": {
            "type": "boolean"
          },
          "courier_dangerous": {
            "type": "boolean"
          },
          "courier_safe_drop": {
            "type": "boolean"
          },
          "total_cost": {
            "type": "number"
          },
          "total_shipping_cost": {
            "type": "number"
          },
          "total_surcharge_cost": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "qty_order_items": {
            "type": "integer"
          },
          "length": {
            "type": "number",
            "description": "The delivery item length in centimetres (cm)"
          },
          "width": {
            "type": "number",
            "description": "The delivery item width in centimetres (cm)"
          },
          "height": {
            "type": "number",
            "description": "The delivery item height in centimetres (cm)"
          },
          "weight": {
            "type": "number",
            "description": "The delivery item's weight in kilograms (kg)"
          },
          "label": {
            "type": "string",
            "description": "The delivery item's storage location to access the Courier label (PDF)"
          },
          "delivery_id": {
            "type": "integer"
          },
          "delivery_batch_id": {
            "type": "integer"
          },
          "delivery_parcel_code": {
            "type": "string"
          },
          "integration_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_model_code": {
            "type": "string"
          },
          "delivery_type_code": {
            "type": "string"
          },
          "courier_id": {
            "type": "integer"
          },
          "courier_type_code": {
            "type": "string"
          },
          "label_url": {
            "deprecated": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "reference",
          "created_at",
          "updated_at",
          "courier_atl",
          "courier_dangerous",
          "courier_safe_drop",
          "partner_id",
          "location_code",
          "delivery_model_code",
          "delivery_type_code"
        ]
      },
      "DeliveryItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeliveryItem"
        }
      },
      "Delivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_ref": {
            "type": "string"
          },
          "courier_tracking_code": {
            "type": "string"
          },
          "courier_service_name": {
            "type": "string"
          },
          "courier_note": {
            "type": "string"
          },
          "from_name": {
            "type": "string"
          },
          "from_company": {
            "type": "string"
          },
          "from_email": {
            "type": "string"
          },
          "from_phone": {
            "type": "string"
          },
          "from_street": {
            "type": "string"
          },
          "from_city": {
            "type": "string"
          },
          "from_state_code": {
            "type": "string"
          },
          "from_postcode": {
            "type": "string"
          },
          "from_country_code": {
            "type": "string"
          },
          "to_name": {
            "type": "string"
          },
          "to_company": {
            "type": "string"
          },
          "to_email": {
            "type": "string"
          },
          "to_phone": {
            "type": "string"
          },
          "to_street": {
            "type": "string"
          },
          "to_city": {
            "type": "string"
          },
          "to_state_code": {
            "type": "string"
          },
          "to_postcode": {
            "type": "string"
          },
          "to_country_code": {
            "type": "string"
          },
          "total_cost": {
            "type": "number",
            "format": "float"
          },
          "total_shipping_cost": {
            "type": "number",
            "format": "float"
          },
          "total_surcharge_cost": {
            "type": "number",
            "format": "float"
          },
          "tax": {
            "type": "number",
            "format": "float"
          },
          "qty_orders": {
            "type": "integer",
            "format": "int32"
          },
          "qty_order_items": {
            "type": "integer",
            "format": "int32"
          },
          "qty_delivery_items": {
            "type": "integer",
            "format": "int32"
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "The total delivery(sum of delivery item's) weight in kilograms (kg)"
          },
          "delivery_batch_id": {
            "type": "integer",
            "format": "int32"
          },
          "delivery_model_code": {
            "$ref": "#/components/schemas/DeliveryModels"
          },
          "order_id": {
            "type": "integer",
            "format": "int32"
          },
          "partner_id": {
            "type": "integer",
            "format": "int32"
          },
          "integration_id": {
            "type": "integer",
            "format": "int32"
          },
          "user_id": {
            "type": "integer",
            "format": "int32"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_type_code": {
            "type": "string"
          },
          "from_location_code": {
            "type": "string"
          },
          "courier_id": {
            "type": "integer",
            "format": "int32"
          },
          "courier_type_code": {
            "type": "string"
          },
          "labels": {
            "type": "string",
            "description": "The deliveries storage location to access the Courier label(s) (PDF)"
          },
          "platform_shipment_id": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "$ref": "#/components/schemas/DeliveryItems"
          }
        },
        "required": [
          "id",
          "reference",
          "created_at",
          "delivery_model_code",
          "order_id",
          "partner_id",
          "location_code",
          "delivery_type_code",
          "from_location_code"
        ]
      },
      "Deliveries": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Delivery"
        }
      },
      "ProcessDeliveryNewRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "delivery_model_code": {
            "$ref": "#/components/schemas/DeliveryModels"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "order_items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "qty_shipped": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "qty_shipped"
                    ]
                  }
                },
                "courier_dangerous": {
                  "type": "boolean"
                },
                "delivery_parcel_code": {
                  "type": "string",
                  "description": "Either a `delivery_parcel_code` or Length/Width/Height must be submitted when creating a delivery. If a `delivery_parcel_code` is submitted, the L/W/H values will be ignored."
                },
                "length": {
                  "type": "number",
                  "description": "The delivery item length in centimetres (cm)"
                },
                "width": {
                  "type": "number",
                  "description": "The delivery item width in centimetres (cm)"
                },
                "height": {
                  "type": "number",
                  "description": "The delivery item height in centimetres (cm)"
                },
                "weight": {
                  "type": "number",
                  "description": "The delivery item weight in kilograms (kg)"
                }
              },
              "required": [
                "order_items",
                "courier_dangerous",
                "weight"
              ]
            }
          },
          "collection_window": {
            "type": "object",
            "description": "An optional collection window can be specified for an order with the `Delivery Type` of **Same-Day**(DoorDash). The UTC date-time (in ISO-8601 format) overrides ASAP when both parameters of the time window (collection_window_start, collection_window_end) are provided.",
            "properties": {
              "collection_window_start": {
                "type": "string",
                "format": "date-time",
                "description": "The start time for the collection window in ISO-8601 format."
              },
              "collection_window_end": {
                "type": "string",
                "format": "date-time",
                "description": "The end time for the collection window in ISO-8601 format."
              }
            },
            "required": [
              "collection_window_start",
              "collection_window_end"
            ]
          }
        },
        "required": [
          "user_id",
          "delivery_model_code",
          "items"
        ]
      },
      "ProcessDeliveryCompleteRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "ProcessDeliveryCancelRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "CreateDeliveryRequest": {
        "type": "object",
        "properties": {
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_ref": {
            "type": "string"
          },
          "courier_tracking_code": {
            "type": "string"
          },
          "courier_service_name": {
            "type": "string"
          },
          "courier_note": {
            "type": "string"
          },
          "from_name": {
            "type": "string"
          },
          "from_company": {
            "type": "string"
          },
          "from_email": {
            "type": "string"
          },
          "from_phone": {
            "type": "string"
          },
          "from_street": {
            "type": "string"
          },
          "from_city": {
            "type": "string"
          },
          "from_state_code": {
            "type": "string"
          },
          "from_postcode": {
            "type": "string"
          },
          "from_country_code": {
            "type": "string"
          },
          "to_name": {
            "type": "string"
          },
          "to_company": {
            "type": "string"
          },
          "to_email": {
            "type": "string"
          },
          "to_phone": {
            "type": "string"
          },
          "to_street": {
            "type": "string"
          },
          "to_city": {
            "type": "string"
          },
          "to_state_code": {
            "type": "string"
          },
          "to_postcode": {
            "type": "string"
          },
          "to_country_code": {
            "type": "string"
          },
          "total_cost": {
            "type": "number",
            "format": "float"
          },
          "total_shipping_cost": {
            "type": "number",
            "format": "float"
          },
          "total_surcharge_cost": {
            "type": "number",
            "format": "float"
          },
          "tax": {
            "type": "number",
            "format": "float"
          },
          "qty_orders": {
            "type": "integer",
            "format": "int32"
          },
          "qty_order_items": {
            "type": "integer",
            "format": "int32"
          },
          "qty_delivery_items": {
            "type": "integer",
            "format": "int32"
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "The total delivery(sum of delivery item's) weight in kilograms (kg)"
          },
          "delivery_batch_id": {
            "type": "integer",
            "format": "int32"
          },
          "delivery_model_code": {
            "$ref": "#/components/schemas/DeliveryModels"
          },
          "order_id": {
            "type": "integer",
            "format": "int32"
          },
          "partner_id": {
            "type": "integer",
            "format": "int32"
          },
          "integration_id": {
            "type": "integer",
            "format": "int32"
          },
          "user_id": {
            "type": "integer",
            "format": "int32"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_type_code": {
            "type": "string"
          },
          "from_location_code": {
            "type": "string"
          },
          "courier_id": {
            "type": "integer",
            "format": "int32"
          },
          "courier_type_code": {
            "type": "string"
          },
          "labels": {
            "type": "string",
            "description": "The deliveries storage location to access the Courier label(s) (PDF)"
          },
          "platform_shipment_id": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "$ref": "#/components/schemas/DeliveryItems"
          }
        },
        "required": [
          "delivery_model_code",
          "order_id",
          "partner_id",
          "location_code",
          "delivery_type_code",
          "from_location_code"
        ]
      },
      "UpdateDeliveryRequest": {
        "type": "object",
        "properties": {
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_ref": {
            "type": "string"
          },
          "courier_tracking_code": {
            "type": "string"
          },
          "courier_service_name": {
            "type": "string"
          },
          "courier_note": {
            "type": "string"
          },
          "from_name": {
            "type": "string"
          },
          "from_company": {
            "type": "string"
          },
          "from_email": {
            "type": "string"
          },
          "from_phone": {
            "type": "string"
          },
          "from_street": {
            "type": "string"
          },
          "from_city": {
            "type": "string"
          },
          "from_state_code": {
            "type": "string"
          },
          "from_postcode": {
            "type": "string"
          },
          "from_country_code": {
            "type": "string"
          },
          "to_name": {
            "type": "string"
          },
          "to_company": {
            "type": "string"
          },
          "to_email": {
            "type": "string"
          },
          "to_phone": {
            "type": "string"
          },
          "to_street": {
            "type": "string"
          },
          "to_city": {
            "type": "string"
          },
          "to_state_code": {
            "type": "string"
          },
          "to_postcode": {
            "type": "string"
          },
          "to_country_code": {
            "type": "string"
          },
          "total_cost": {
            "type": "number",
            "format": "float"
          },
          "total_shipping_cost": {
            "type": "number",
            "format": "float"
          },
          "total_surcharge_cost": {
            "type": "number",
            "format": "float"
          },
          "tax": {
            "type": "number",
            "format": "float"
          },
          "qty_orders": {
            "type": "integer",
            "format": "int32"
          },
          "qty_order_items": {
            "type": "integer",
            "format": "int32"
          },
          "qty_delivery_items": {
            "type": "integer",
            "format": "int32"
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "The total delivery(sum of delivery item's) weight in kilograms (kg)"
          },
          "delivery_batch_id": {
            "type": "integer",
            "format": "int32"
          },
          "delivery_model_code": {
            "$ref": "#/components/schemas/DeliveryModels"
          },
          "order_id": {
            "type": "integer",
            "format": "int32"
          },
          "partner_id": {
            "type": "integer",
            "format": "int32"
          },
          "integration_id": {
            "type": "integer",
            "format": "int32"
          },
          "user_id": {
            "type": "integer",
            "format": "int32"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_type_code": {
            "type": "string"
          },
          "from_location_code": {
            "type": "string"
          },
          "courier_id": {
            "type": "integer",
            "format": "int32"
          },
          "courier_type_code": {
            "type": "string"
          },
          "labels": {
            "type": "string",
            "description": "The deliveries storage location to access the Courier label(s) (PDF)"
          },
          "platform_shipment_id": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "$ref": "#/components/schemas/DeliveryItems"
          }
        }
      },
      "ProcessCollectionDeliveryBatchByLocationRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "delivery_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "user_id",
          "delivery_ids"
        ]
      },
      "FilteredDeliveryBatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_ref": {
            "type": "string"
          },
          "total_cost": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "qty_orders": {
            "type": "integer"
          },
          "qty_order_items": {
            "type": "integer"
          },
          "qty_deliveries": {
            "type": "integer"
          },
          "qty_delivery_items": {
            "type": "integer"
          },
          "weight": {
            "type": "number",
            "description": "The total delivery batch(sum of delivery's delivery item's) weight in kilograms (kg)"
          },
          "partner_id": {
            "type": "integer"
          },
          "integration_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_model_code": {
            "type": "string"
          },
          "from_location_code": {
            "type": "string"
          },
          "courier_id": {
            "type": "integer"
          },
          "courier_type_code": {
            "type": "string"
          },
          "document_url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "reference",
          "created_at",
          "partner_id",
          "location_code",
          "delivery_model_code",
          "from_location_code"
        ]
      },
      "FilteredDeliveryBatchResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FilteredDeliveryBatch"
          }
        }
      },
      "ProcessDropoffDeliveryBatchByLocationRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "delivery_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "user_id",
          "delivery_ids"
        ]
      },
      "CreateDeliveryBatchRequest": {
        "type": "object",
        "properties": {
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_ref": {
            "type": "string"
          },
          "total_cost": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "qty_orders": {
            "type": "integer"
          },
          "qty_order_items": {
            "type": "integer"
          },
          "qty_deliveries": {
            "type": "integer"
          },
          "qty_delivery_items": {
            "type": "integer"
          },
          "weight": {
            "type": "number",
            "description": "The total delivery batch(sum of delivery's delivery item's) weight in kilograms (kg)"
          },
          "document": {
            "type": "string",
            "description": "The delivery batches URL to access the Courier manifest document (PDF)"
          },
          "partner_id": {
            "type": "integer"
          },
          "integration_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_model_code": {
            "type": "string"
          },
          "from_location_code": {
            "type": "string"
          },
          "courier_id": {
            "type": "integer"
          },
          "courier_type_code": {
            "type": "string"
          }
        },
        "required": [
          "partner_id",
          "location_code",
          "delivery_model_code",
          "from_location_code"
        ]
      },
      "UpdateDeliveryBatchRequest": {
        "type": "object",
        "properties": {
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "courier_ref": {
            "type": "string"
          },
          "total_cost": {
            "type": "number"
          },
          "tax": {
            "type": "number"
          },
          "qty_orders": {
            "type": "integer"
          },
          "qty_order_items": {
            "type": "integer"
          },
          "qty_deliveries": {
            "type": "integer"
          },
          "qty_delivery_items": {
            "type": "integer"
          },
          "weight": {
            "type": "number",
            "description": "The total delivery batch(sum of delivery's delivery item's) weight in kilograms (kg)"
          },
          "document": {
            "type": "string",
            "description": "The delivery batches URL to access the Courier manifest document (PDF)"
          },
          "partner_id": {
            "type": "integer"
          },
          "integration_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string"
          },
          "delivery_model_code": {
            "type": "string"
          },
          "from_location_code": {
            "type": "string"
          },
          "courier_id": {
            "type": "integer"
          },
          "courier_type_code": {
            "type": "string"
          }
        }
      },
      "DeliveryParcel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "length": {
            "type": "number",
            "description": "The delivery parcel length in centimetres (cm)"
          },
          "width": {
            "type": "number",
            "description": "The delivery parcel width in centimetres (cm)"
          },
          "height": {
            "type": "number",
            "description": "The delivery parcel height in centimetres (cm)"
          },
          "weight": {
            "type": "number",
            "description": "The delivery parcel packaging weight(without contents) in kilograms (kg)"
          },
          "is_visible": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "id",
          "created_at",
          "code",
          "name",
          "length",
          "width",
          "height",
          "is_visible"
        ]
      },
      "DeliveryParcels": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeliveryParcel"
        }
      },
      "CreateDeliveryParcelRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "length": {
            "type": "number",
            "description": "The delivery parcel length in centimetres (cm)"
          },
          "width": {
            "type": "number",
            "description": "The delivery parcel width in centimetres (cm)"
          },
          "height": {
            "type": "number",
            "description": "The delivery parcel height in centimetres (cm)"
          },
          "weight": {
            "type": "number",
            "description": "The delivery parcel packaging weight(without contents) in kilograms (kg)"
          },
          "is_visible": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "code",
          "name",
          "length",
          "width",
          "height",
          "is_visible"
        ]
      },
      "UpdateDeliveryParcelRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "length": {
            "type": "number",
            "description": "The delivery parcel length in centimetres (cm)"
          },
          "width": {
            "type": "number",
            "description": "The delivery parcel width in centimetres (cm)"
          },
          "height": {
            "type": "number",
            "description": "The delivery parcel height in centimetres (cm)"
          },
          "weight": {
            "type": "number",
            "description": "The delivery parcel packaging weight(without contents) in kilograms (kg)"
          },
          "is_visible": {
            "type": "boolean"
          },
          "partner_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "location_code": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "DeliveryMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes"
          },
          "delivery_type_code": {
            "$ref": "#/components/schemas/DeliveryTypes"
          },
          "is_live_quote": {
            "type": "boolean"
          },
          "total": {
            "type": "number",
            "description": "Delivery Total in AUD, including Tax. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
            "example": 10000.12,
            "minimum": 0
          },
          "tax": {
            "type": "number",
            "description": "Delivery Tax in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
            "example": 10000.12,
            "minimum": 0
          },
          "delivery_estimate": {
            "type": "string",
            "description": "The estimated delivery window.",
            "example": "1-3 business days"
          },
          "is_enabled": {
            "type": "boolean"
          },
          "enable_fallback_price": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "code",
          "name",
          "is_live_quote",
          "total",
          "tax",
          "delivery_estimate",
          "is_enabled",
          "enable_fallback_price"
        ]
      },
      "DeliveryMethods": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DeliveryMethod"
        }
      },
      "CreateDeliveryMethodRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes",
            "maxLength": 64
          },
          "delivery_type_code": {
            "$ref": "#/components/schemas/DeliveryTypes",
            "maxLength": 64
          },
          "is_live_quote": {
            "type": "boolean"
          },
          "total": {
            "type": "number",
            "description": "Delivery Total in AUD, including Tax. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
            "example": 10000.12,
            "minimum": 0
          },
          "tax": {
            "type": "number",
            "description": "Delivery Tax in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
            "example": 10000.12,
            "minimum": 0
          },
          "delivery_estimate": {
            "type": "string",
            "description": "The estimated delivery window.",
            "example": "1-3 business days",
            "maxLength": 255
          },
          "is_enabled": {
            "type": "boolean"
          },
          "enable_fallback_price": {
            "type": "boolean"
          }
        },
        "required": [
          "code",
          "name",
          "is_live_quote",
          "total",
          "tax",
          "delivery_estimate",
          "is_enabled",
          "enable_fallback_price"
        ]
      },
      "UpdateDeliveryMethodRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 64
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "courier_type_code": {
            "$ref": "#/components/schemas/CourierTypes",
            "maxLength": 64
          },
          "delivery_type_code": {
            "$ref": "#/components/schemas/DeliveryTypes",
            "maxLength": 64
          },
          "is_live_quote": {
            "type": "boolean"
          },
          "total": {
            "type": "number",
            "description": "Delivery Total in AUD, including Tax. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
            "example": 10000.12,
            "minimum": 0
          },
          "tax": {
            "type": "number",
            "description": "Delivery Tax in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
            "example": 10000.12,
            "minimum": 0
          },
          "delivery_estimate": {
            "type": "string",
            "description": "The estimated delivery window.",
            "example": "1-3 business days",
            "maxLength": 255
          },
          "is_enabled": {
            "type": "boolean"
          },
          "enable_fallback_price": {
            "type": "boolean"
          }
        }
      },
      "PublicGetDeliveryMethodsRequest": {
        "type": "object",
        "properties": {
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha"
          },
          "is_live_quote": {
            "type": "boolean"
          },
          "delivery_method_codes": {
            "type": "array",
            "description": "An optional subset of Delivery Method codes to request. If no codes are provided, all available Delivery Methods will be returned.",
            "items": {
              "type": "string"
            }
          },
          "partner": {
            "type": "object",
            "description": "The `partner` property is used to assign the Order's Partner and dispatch Location.",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1
              },
              "location_code": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64
              }
            },
            "required": [
              "id",
              "location_code"
            ]
          },
          "customer": {
            "type": "object",
            "description": "The `customer` property is used to assign the Order's Customer details.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone"
            ]
          },
          "delivery": {
            "type": "object",
            "description": "The `delivery` property is used to calculate the delivery cost and availability.",
            "properties": {
              "first_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "last_name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 4,
                "maxLength": 255
              },
              "phone": {
                "type": "string",
                "format": "Standard [E.164](https://en.wikipedia.org/wiki/E.164)",
                "description": "The Customer's Phone Number, preferably formatted using standard E.164 to avoid conflicts with Google's [**libphonenumber**](https://github.com/google/libphonenumber) library which is used to parse and format the data using format E.164.",
                "example": "+61431471915",
                "minLength": 6,
                "maxLength": 14
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string",
                    "description": "The Street(s) as a **JSON stringified string array** with a maximum of 2 elements.",
                    "example": "['Unit 2/4','123 Fake St']",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "city": {
                    "type": "string",
                    "description": "The City/Suburb as a **string**.",
                    "example": "North Haverbrook",
                    "minLength": 1,
                    "maxLength": 255
                  },
                  "state_code": {
                    "$ref": "#/components/schemas/AddressRegions"
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The Postcode as a **string** 4 digits in length.",
                    "example": "2000",
                    "minLength": 4,
                    "maxLength": 4
                  },
                  "country_code": {
                    "$ref": "#/components/schemas/AddressCountries"
                  }
                },
                "required": [
                  "street",
                  "city",
                  "state_code",
                  "postcode",
                  "country_code"
                ]
              }
            },
            "required": [
              "first_name",
              "last_name",
              "email",
              "phone",
              "address"
            ]
          },
          "items": {
            "type": "array",
            "description": "The `items` property is used to assign the Order's product(s)/item(s). The prescription-related fields are encrypted within the database.",
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "type": "string",
                  "example": "SD-CRM125G",
                  "minLength": 1,
                  "maxLength": 128
                },
                "name": {
                  "type": "string",
                  "example": "Sudocrem Healing Cream 125g",
                  "minLength": 1,
                  "maxLength": 255
                },
                "qty": {
                  "type": "integer",
                  "example": 1,
                  "minimum": 1
                },
                "price": {
                  "type": "number",
                  "description": "The individual Item Price in AUD, including Tax. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
                  "example": 10000.12,
                  "minimum": 0
                },
                "tax": {
                  "type": "number",
                  "description": "The individual Item Tax in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
                  "example": 10000.12,
                  "minimum": 0
                },
                "is_prescription": {
                  "type": "boolean"
                },
                "length": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 105
                },
                "width": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 105
                },
                "height": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 105
                },
                "weight": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 22
                }
              },
              "required": [
                "sku",
                "name",
                "qty",
                "price",
                "tax",
                "is_prescription"
              ]
            }
          }
        },
        "required": [
          "security_token",
          "is_live_quote",
          "partner",
          "customer",
          "delivery",
          "items"
        ]
      },
      "DeliveryMethodsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "readOnly": true
            },
            "code": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "delivery_estimate": {
              "type": "string",
              "description": "The estimated delivery window.",
              "example": "1-3 business days"
            },
            "total": {
              "type": "number",
              "description": "Delivery Total in AUD, including Tax. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
              "example": 10000.12,
              "minimum": 0
            },
            "tax": {
              "type": "number",
              "description": "Delivery Tax in AUD. This field accepts a float with up to 4 decimal places and the database column is set to SQL Decimal type `DECIMAL (12,4)`.",
              "example": 10000.12,
              "minimum": 0
            },
            "delivery_type_code": {
              "$ref": "#/components/schemas/DeliveryTypes"
            },
            "courier_type_code": {
              "$ref": "#/components/schemas/CourierTypes"
            },
            "is_live_quote": {
              "type": "boolean"
            }
          },
          "required": [
            "id",
            "code",
            "name",
            "total",
            "tax",
            "is_live_quote"
          ]
        }
      },
      "QueueStatuses": {
        "type": "string",
        "enum": [
          "new",
          "dispensing_in_progress",
          "dispensed",
          "awaiting_collection",
          "collected",
          "cancelled"
        ]
      },
      "QueueStates": {
        "type": "string",
        "enum": [
          "new",
          "processing",
          "complete"
        ]
      },
      "QueueItemTypes": {
        "type": "string",
        "enum": [
          "escript",
          "erx_paper_script",
          "paper_script"
        ]
      },
      "QueueItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "queue_item_type_code": {
            "$ref": "#/components/schemas/QueueItemTypes"
          },
          "queue_element_id": {
            "type": "integer"
          },
          "prescription_token": {
            "type": "string"
          },
          "prescription_name": {
            "type": "string"
          },
          "qty": {
            "type": "integer"
          },
          "brand_substitution_permitted": {
            "type": "boolean"
          },
          "requires_consultation": {
            "type": "boolean"
          },
          "queue_item_note": {
            "type": "string"
          },
          "prescription_repeats": {
            "type": "string"
          },
          "prescription_patient_name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "queue_item_type_code",
          "queue_element_id",
          "qty",
          "brand_substitution_permitted",
          "requires_consultation"
        ]
      },
      "QueueItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/QueueItem"
        }
      },
      "QueueElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "queue_status_code": {
            "$ref": "#/components/schemas/QueueStatuses"
          },
          "queue_state_code": {
            "$ref": "#/components/schemas/QueueStates"
          },
          "is_on_hold": {
            "type": "boolean"
          },
          "is_on_dashboard": {
            "type": "boolean"
          },
          "customer_first_name": {
            "type": "string"
          },
          "customer_last_name": {
            "type": "string"
          },
          "customer_phone": {
            "type": "string"
          },
          "customer_email": {
            "type": "string"
          },
          "customer_notified_at": {
            "type": "string",
            "format": "date-time"
          },
          "requires_consultation": {
            "type": "boolean"
          },
          "consultation_completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "consultation_user_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "location_id": {
            "type": "integer"
          },
          "order_id": {
            "type": "integer"
          },
          "queue_note": {
            "type": "string"
          },
          "queue_items": {
            "$ref": "#/components/schemas/QueueItems"
          },
          "queue_element_number": {
            "type": "string"
          },
          "customer_verification_method": {
            "type": "string"
          },
          "processed_at": {
            "type": "string",
            "format": "date-time"
          },
          "was_on_hold": {
            "type": "boolean"
          },
          "reminder_required": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "queue_status_code",
          "queue_state_code",
          "is_on_hold",
          "is_on_dashboard",
          "requires_consultation",
          "partner_id",
          "location_id",
          "queue_element_number",
          "was_on_hold",
          "reminder_required"
        ]
      },
      "QueueElements": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/QueueElement"
        }
      },
      "QueueElementsSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/QueueElements"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "ProcessQueueItemNewRequest": {
        "type": "object",
        "properties": {
          "queue_item_type_code": {
            "$ref": "#/components/schemas/QueueItemTypes"
          },
          "prescription_token": {
            "type": "string",
            "maxLength": 128
          },
          "prescription_name": {
            "type": "string",
            "maxLength": 255
          },
          "qty": {
            "type": "integer",
            "minimum": 1
          },
          "brand_substitution_permitted": {
            "type": "boolean"
          },
          "requires_consultation": {
            "type": "boolean"
          },
          "queue_item_note": {
            "type": "string",
            "maxLength": 512
          },
          "prescription_repeats": {
            "type": "string",
            "maxLength": 255
          },
          "prescription_patient_name": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "queue_item_type_code",
          "qty",
          "brand_substitution_permitted",
          "requires_consultation"
        ]
      },
      "CreateQueueElementRequest": {
        "type": "object",
        "properties": {
          "customer_first_name": {
            "type": "string",
            "maxLength": 255
          },
          "customer_last_name": {
            "type": "string",
            "maxLength": 255
          },
          "customer_phone": {
            "type": "string",
            "maxLength": 255
          },
          "customer_email": {
            "type": "string",
            "maxLength": 255
          },
          "requires_consultation": {
            "type": "boolean"
          },
          "user_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "location_id": {
            "type": "integer"
          },
          "order_id": {
            "type": "integer"
          },
          "queue_note": {
            "type": "string",
            "maxLength": 512
          },
          "queue_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessQueueItemNewRequest"
            }
          },
          "queue_number_id": {
            "description": "Optionally provide a queue number ID generated by the Get Queue Number endpoint. A Queue Number will be generated automatically if one is not provided.",
            "type": "integer",
            "minimum": 1
          },
          "reminder_required": {
            "type": "boolean"
          }
        },
        "required": [
          "requires_consultation",
          "user_id",
          "partner_id",
          "location_id"
        ]
      },
      "QueueElementWithItems": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/QueueElement"
          }
        ],
        "properties": {
          "items": {
            "$ref": "#/components/schemas/QueueItems"
          }
        },
        "required": [
          "id",
          "created_at",
          "queue_status_code",
          "queue_state_code",
          "is_on_hold",
          "is_on_dashboard",
          "requires_consultation",
          "partner_id",
          "location_id",
          "queue_element_number",
          "was_on_hold",
          "reminder_required",
          "items"
        ]
      },
      "QueueTypes": {
        "type": "string",
        "enum": [
          "default",
          "consultation"
        ]
      },
      "CreateQueueNumberRequest": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QueueTypes"
          },
          "location_id": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "type",
          "location_id"
        ]
      },
      "QueueNumber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "partner_id": {
            "type": "integer"
          },
          "location_id": {
            "type": "integer"
          },
          "queue_id": {
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/QueueTypes"
          },
          "number": {
            "type": "string",
            "description": "A valid Queue Number in format... TBC",
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "created_at",
          "partner_id",
          "location_id",
          "type",
          "number"
        ]
      },
      "QueueElementSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/QueueElement"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "UpdateQueueElementRequest": {
        "type": "object",
        "properties": {
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "queue_status_code": {
            "$ref": "#/components/schemas/QueueStatuses"
          },
          "queue_state_code": {
            "$ref": "#/components/schemas/QueueStates"
          },
          "is_on_hold": {
            "type": "boolean"
          },
          "is_on_dashboard": {
            "type": "boolean"
          },
          "customer_first_name": {
            "type": "string",
            "maxLength": 255
          },
          "customer_last_name": {
            "type": "string",
            "maxLength": 255
          },
          "customer_phone": {
            "type": "string",
            "maxLength": 255
          },
          "customer_email": {
            "type": "string",
            "maxLength": 255
          },
          "customer_notified_at": {
            "type": "string",
            "format": "date-time"
          },
          "requires_consultation": {
            "type": "boolean"
          },
          "consultation_completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "consultation_user_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "partner_id": {
            "type": "integer"
          },
          "location_id": {
            "type": "integer"
          },
          "order_id": {
            "type": "integer"
          },
          "queue_note": {
            "type": "string",
            "maxLength": 512
          },
          "customer_verification_method": {
            "type": "string",
            "maxLength": 255
          },
          "processed_at": {
            "type": "string",
            "format": "date-time"
          },
          "was_on_hold": {
            "type": "boolean"
          },
          "reminder_required": {
            "type": "boolean"
          }
        }
      },
      "ProcessQueueElementUpdateRequest": {
        "type": "object",
        "properties": {
          "is_on_hold": {
            "type": "boolean"
          },
          "is_on_dashboard": {
            "type": "boolean"
          },
          "customer_first_name": {
            "type": "string",
            "maxLength": 255
          },
          "customer_last_name": {
            "type": "string",
            "maxLength": 255
          },
          "customer_phone": {
            "type": "string",
            "maxLength": 255
          },
          "customer_email": {
            "type": "string",
            "maxLength": 255
          },
          "requires_consultation": {
            "type": "boolean"
          },
          "queue_note": {
            "type": "string",
            "maxLength": 512
          },
          "customer_verification_method": {
            "type": "string",
            "maxLength": 255
          },
          "reminder_required": {
            "type": "boolean"
          }
        }
      },
      "ProcessQueueElementCompleteConsultationRequest": {
        "type": "object",
        "properties": {
          "consultation_user_id": {
            "type": "integer"
          }
        },
        "required": [
          "consultation_user_id"
        ]
      },
      "UpdateQueueStatusRequest": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "status_code": {
              "$ref": "#/components/schemas/QueueStatuses"
            }
          },
          "required": [
            "id",
            "status_code"
          ]
        }
      },
      "UpdateQueueStatusResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/QueueElement"
        }
      },
      "QueueDashboardNumber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "queue_status_code": {
            "$ref": "#/components/schemas/QueueStatuses"
          },
          "queue_element_number": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "queue_status_code",
          "queue_element_number"
        ]
      },
      "QueueDashboardNumbers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/QueueDashboardNumber"
        }
      },
      "QueueDashboardNumbersSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/QueueDashboardNumbers"
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "GetScriptsPartnersRequest": {
        "type": "object",
        "properties": {
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha",
            "description": "The security token generated by Google reCaptcha's `execute` action. The expected action value is `get_scripts_partners`."
          }
        },
        "required": [
          "security_token"
        ]
      },
      "ProductRequest": {
        "type": "object",
        "properties": {
          "security_token": {
            "$ref": "#/components/schemas/Recaptcha"
          },
          "prescription_token_number": {
            "type": "string"
          },
          "partner": {
            "type": "object",
            "description": "The `partner` property is used to assign the Partner and dispatch Location.",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "send_admin_notification": {
            "type": "boolean",
            "description": "Determines whether or not to notify system admins of this request via SMS.",
            "default": false
          }
        },
        "required": [
          "security_token",
          "prescription_token_number",
          "partner"
        ]
      },
      "MedicationDosageInstruction": {
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer"
          },
          "text": {
            "type": "string"
          },
          "route": {
            "type": "string"
          }
        },
        "required": [
          "sequence",
          "text",
          "route"
        ]
      },
      "HumanName": {
        "type": "object",
        "required": [
          "given"
        ],
        "properties": {
          "family": {
            "type": "string",
            "nullable": true
          },
          "given": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "use": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "brand_name": {
            "type": "string"
          },
          "barcode": {
            "type": "string"
          },
          "drug_schedule": {
            "type": "string"
          },
          "gst_to_consumer": {
            "type": "boolean"
          },
          "supplier_id": {
            "type": "string"
          },
          "supplier_item_code": {
            "type": "string"
          },
          "pde": {
            "type": "string"
          },
          "price_concessional_in_cents": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "price_general_in_cents": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "price_private_in_cents": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          }
        },
        "required": [
          "name",
          "brand_name",
          "barcode",
          "drug_schedule",
          "gst_to_consumer",
          "supplier_id",
          "supplier_item_code",
          "pde"
        ]
      },
      "ProductResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "medication_knowledge": {
            "type": "object",
            "properties": {
              "mk_dosage_instruction_text": {
                "$ref": "#/components/schemas/MedicationDosageInstruction"
              },
              "mk_remaining_repeats": {
                "type": "integer",
                "format": "int32"
              },
              "names": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HumanName"
                }
              }
            },
            "required": [
              "names",
              "mk_dosage_instruction_text",
              "mk_remaining_repeats"
            ],
            "nullable": true
          },
          "medication_knowledge_raw": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "integer",
            "minimum": 0
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "required": [
          "success",
          "message",
          "uuid",
          "token",
          "results"
        ]
      },
      "ErrorCode": {
        "type": "string",
        "description": "Error codes pushed out via the API",
        "enum": [
          "AlreadyDispensed",
          "NotFound",
          "BadToken",
          "MedicationKnowledge",
          "UnexpectedError",
          "NoResults"
        ]
      },
      "ErrorResponse-2": {
        "type": "object",
        "description": "Used for all error responses",
        "required": [
          "success",
          "error_code",
          "uuid"
        ],
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "success": {
            "type": "boolean",
            "description": "This will always be false"
          },
          "uuid": {
            "type": "string",
            "description": "Report this back to Rival Software to match up with logs"
          }
        }
      }
    },
    "securitySchemes": {
      "BasicAuthentication": {
        "type": "http",
        "description": "Use the user `email` and `password` to authenticate.",
        "scheme": "basic"
      },
      "BearerTokenAuthentication": {
        "type": "http",
        "description": "If the user is already authenticated, a JWT bearer token can be included in requests instead of the JWT cookie",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "CookieAuthentication": {
        "type": "apiKey",
        "description": "If the user is already authenticated, a JWT HttpOnly cookie is sent automatically with requests from the client's browser",
        "in": "cookie",
        "name": "scription_token"
      }
    }
  }
}